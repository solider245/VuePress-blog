(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{366:function(s,t,e){"use strict";e.r(t);var a=e(25),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"名称"}},[e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#toc-名称"}},[s._v("[[toc]]\n名称")])]),e("li",[e("a",{attrs:{href:"#描述"}},[s._v("描述")])]),e("li",[e("a",{attrs:{href:"#git-hooks-能做什么"}},[s._v("Git Hooks 能做什么")])]),e("li",[e("a",{attrs:{href:"#git-hooks-是如何工作的"}},[s._v("Git Hooks 是如何工作的")]),e("ul",[e("li",[e("a",{attrs:{href:"#一个简单的-hooks-例子"}},[s._v("一个简单的 Hooks 例子")])]),e("li",[e("a",{attrs:{href:"#脚本语言"}},[s._v("脚本语言")])]),e("li",[e("a",{attrs:{href:"#钩子的作用域"}},[s._v("钩子的作用域")])])])]),e("li",[e("a",{attrs:{href:"#hooks（钩子）的几种情况-（这一节官网是翻译，可以不用仔细看）"}},[s._v("HOOKS（钩子）的几种情况 （这一节官网是翻译，可以不用仔细看）")])]),e("li",[e("a",{attrs:{href:"#常用钩子有哪些"}},[s._v("常用钩子有哪些")]),e("ul",[e("li",[e("a",{attrs:{href:"#客户端-hooks"}},[s._v("客户端 Hooks")]),e("ul",[e("li",[e("a",{attrs:{href:"#_1-提交工作流挂钩"}},[s._v("1.提交工作流挂钩")])]),e("li",[e("a",{attrs:{href:"#_2-e-mail工作流挂钩"}},[s._v("2.E-mail工作流挂钩")])]),e("li",[e("a",{attrs:{href:"#_3-其他客户端挂钩"}},[s._v("3.其他客户端挂钩")])])])]),e("li",[e("a",{attrs:{href:"#服务器端-hooks"}},[s._v("服务器端 Hooks")])])])]),e("li",[e("a",{attrs:{href:"#husky是什么？"}},[s._v("husky是什么？")]),e("ul",[e("li",[e("a",{attrs:{href:"#husky安装"}},[s._v("husky安装")]),e("ul",[e("li",[e("a",{attrs:{href:"#从0-14升级"}},[s._v("从0.14升级")])]),e("li",[e("a",{attrs:{href:"#支持的挂钩"}},[s._v("支持的挂钩")])]),e("li",[e("a",{attrs:{href:"#访问git参数和标准输入"}},[s._v("访问Git参数和标准输入")])]),e("li",[e("a",{attrs:{href:"#跳过所有挂钩（重新定位）"}},[s._v("跳过所有挂钩（重新定位）")])]),e("li",[e("a",{attrs:{href:"#禁用自动安装"}},[s._v("禁用自动安装")])]),e("li",[e("a",{attrs:{href:"#ci服务器"}},[s._v("CI服务器")])]),e("li",[e("a",{attrs:{href:"#monorepos"}},[s._v("Monorepos")])]),e("li",[e("a",{attrs:{href:"#节点版本管理器"}},[s._v("节点版本管理器")])]),e("li",[e("a",{attrs:{href:"#本地命令（〜-huskyrc）"}},[s._v("本地命令（〜/.huskyrc）")])]),e("li",[e("a",{attrs:{href:"#多个命令"}},[s._v("多个命令")])]),e("li",[e("a",{attrs:{href:"#疑难排解"}},[s._v("疑难排解")])])])])])])])]),s._v("\n名称")]),s._v(" "),e("p",[s._v("githooks-Git使用的挂钩。("),e("a",{attrs:{href:"https://git-scm.com/docs/githooks",target:"_blank",rel:"noopener noreferrer"}},[s._v("githook在官网的介绍"),e("OutboundLink")],1),s._v(")")]),s._v(" "),e("h2",{attrs:{id:"描述"}},[s._v("描述")]),s._v(" "),e("p",[s._v("如同其他许多的版本控制系统一样，Git 也具有在特定事件发生之前或之后执行特定脚本代码功能（从概念上类比，就与监听事件、触发器之类的东西类似）。Git Hooks 就是那些在Git执行特定事件（如commit、push、receive等）后触发运行的脚本，挂钩是可以放置在挂钩目录中的程序，可在git执行的某些点触发动作。没有设置可执行位的钩子将被忽略。")]),s._v(" "),e("p",[s._v("默认情况下，"),e("code",[s._v("hooks")]),s._v("目录是"),e("code",[s._v("$GIT_DIR/hooks")]),s._v("，但是可以通过"),e("code",[s._v("core.hooksPath")]),s._v("配置变量来更改（请参见 "),e("a",{attrs:{href:"https://git-scm.com/docs/git-config",target:"_blank",rel:"noopener noreferrer"}},[s._v("git-config [1]"),e("OutboundLink")],1),s._v("）。")]),s._v(" "),e("h2",{attrs:{id:"git-hooks-能做什么"}},[s._v("Git Hooks 能做什么")]),s._v(" "),e("p",[s._v("Git Hooks是定制化的脚本程序，所以它实现的功能与相应的git动作相关,如下几个简单例子："),e("br"),s._v("\n1.多人开发代码语法、规范强制统一"),e("br"),s._v("\n2.commit message 格式化、是否符合某种规范"),e("br"),s._v("\n3.如果有需要，测试用例的检测"),e("br"),s._v("\n4.服务器代码有新的更新的时候通知所有开发成员"),e("br"),s._v("\n5.代码提交后的项目自动打包（git receive之后） 等等...")]),s._v(" "),e("p",[s._v("更多的功能可以按照生产环境的需求写出来")]),s._v(" "),e("h2",{attrs:{id:"git-hooks-是如何工作的"}},[s._v("Git Hooks 是如何工作的")]),s._v(" "),e("p",[s._v("每一个使用了 git 的工程下面都有一个隐藏的 .git 文件夹。"),e("br"),s._v(" "),e("img",{attrs:{src:"https://img2018.cnblogs.com/blog/733258/202002/733258-20200204180050399-1177433138.png",alt:""}})]),s._v(" "),e("p",[s._v("挂钩都被存储在 .git 目录下的 hooks 子目录中，即大部分项目中的 .git/hooks。 如下图:"),e("br"),s._v(" "),e("img",{attrs:{src:"https://img2018.cnblogs.com/blog/733258/202002/733258-20200204180058499-1090156457.png",alt:""}})]),s._v(" "),e("p",[s._v("Git 默认会放置一些脚本样本在这个目录中，除了可以作为挂钩使用，这些样本本身是可以独立使用的。所有的样本都是shell脚本，其中一些还包含了Perl的脚本。不过，任何正确命名的可执行脚本都可以正常使用 ，也可以用Ruby或Python，或其他脚本语言。")]),s._v(" "),e("p",[s._v("上图是git 初始化的时候生成的默认钩子，已包含了大部分可以使用的钩子，但是 .sample 拓展名防止它们默认被执行。为了安装一个钩子，你只需要去掉 .sample 拓展名。或者你要写一个新的脚本，你只需添加一个文件名和上述匹配的新文件，去掉.sample拓展名。把一个正确命名且可执行的文件放入 Git 目录下的 hooks子目录中，可以激活该挂钩脚本，之后他一直会被 Git 调用。")]),s._v(" "),e("h3",{attrs:{id:"一个简单的-hooks-例子"}},[s._v("一个简单的 Hooks 例子")]),s._v(" "),e("p",[s._v("使用shell 这里尝试写一个简单的钩子，安装一个"),e("code",[s._v("prepare-commit-msg")]),s._v("钩子。去掉脚本的"),e("code",[s._v(".sample")]),s._v("拓展名，在文件中加上下面这两行：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('#!/bin/sh\n\necho "# Please include a useful commit message!" > $1\n\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("接下来你每次运行git commit时，你会看到默认的提交信息都被替换了。")]),s._v(" "),e("p",[s._v("内置的样例脚本是非常有用的参考资料，因为每个钩子传入的参数都有非常详细的说明（不同钩子不一样）。")]),s._v(" "),e("h3",{attrs:{id:"脚本语言"}},[s._v("脚本语言")]),s._v(" "),e("p",[s._v("git自己生成的默认钩子的脚本大多是shell和Perl语言的，但你可以使用任何脚本语言，只要它们最后能编译到可执行文件。每次脚本中的 #!/bin/sh 定义了你的文件将被如何解析。比如，使用其他语言时你只需要将path改为你的解释器的路径。")]),s._v(" "),e("p",[s._v("比如说，你可以在 "),e("code",[s._v("prepare-commit-msg")]),s._v(" 中写一个可执行的Python脚本。下面这个钩子和上一节的shell脚本做的事完全一样。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("#!/usr/bin/env python\n\nimport sys, os\n\ncommit_msg_filepath = sys.argv[1]\nwith open(commit_msg_filepath, 'w') as f:\n    f.write(\"# Please include a useful commit message!\")\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("注意第一行改成了python解释器的路径。此外，这里用"),e("code",[s._v("sys.argv[1]")]),s._v("而不是$1来获取第一个参数。这个特性非常强大，因为你可以用任何你喜欢的语言来编写Git钩子。")]),s._v(" "),e("h3",{attrs:{id:"钩子的作用域"}},[s._v("钩子的作用域")]),s._v(" "),e("p",[s._v("对于任何Git仓库来说钩子都是本地的，而且它不会随着"),e("code",[s._v("git clone")]),s._v("一起复制到新的仓库。而且，因为钩子是本地的，任何能接触得到仓库的人都可以修改。在开发团队中维护钩子是比较复杂的，因为"),e("code",[s._v(".git/hooks")]),s._v("目录不随你的项目一起拷贝，也不受版本控制影响。一个简单的解决办法是把你的钩子存在项目的实际目录中（在.git外）。这样你就可以像其他文件一样进行版本控制。")]),s._v(" "),e("p",[s._v("作为备选方案，Git同样提供了一个模板目录机制来更简单地自动安装钩子。每次你使用 "),e("code",[s._v("git init")]),s._v(" 或"),e("code",[s._v("git clone")]),s._v("时，模板目录文件夹下的所有文件和目录都会被复制到.git文件夹。")]),s._v(" "),e("h2",{attrs:{id:"hooks（钩子）的几种情况-（这一节官网是翻译，可以不用仔细看）"}},[s._v("HOOKS（钩子）的几种情况 （这一节官网是翻译，可以不用仔细看）")]),s._v(" "),e("p",[s._v("1."),e("code",[s._v("applypatch-msg")]),s._v("(应用程序消息)")]),s._v(" "),e("p",[s._v("这个钩子由"),e("a",{attrs:{href:"https://git-scm.com/docs/git-am",target:"_blank",rel:"noopener noreferrer"}},[s._v("git am"),e("OutboundLink")],1),s._v("调用。它只有一个参数，即保存建议的提交日志消息的文件的名称。以非零状态退出会导致"),e("code",[s._v("git am")]),s._v("在应用补丁之前中止。")]),s._v(" "),e("p",[s._v("该挂钩允许在适当位置编辑消息文件，并可用于将消息规范化为某些项目标准格式。检查消息文件后，它也可以用于拒绝提交。")]),s._v(" "),e("p",[s._v("启用后，默认的"),e("code",[s._v("applypatch-msg")]),s._v("挂钩将运行 "),e("code",[s._v("commit-msg")]),s._v("挂钩（如果后者已启用）。")]),s._v(" "),e("p",[s._v("2."),e("code",[s._v("pre-applypatch")]),s._v("(应用前批处理)")]),s._v(" "),e("p",[s._v("这个钩子由"),e("a",{attrs:{href:"https://git-scm.com/docs/git-am",target:"_blank",rel:"noopener noreferrer"}},[s._v("git am"),e("OutboundLink")],1),s._v("调用。它不接受任何参数，并在应用补丁程序之后、提交之前调用。")]),s._v(" "),e("p",[s._v("如果它以非零状态退出，则在应用补丁程序后将不会提交工作树。")]),s._v(" "),e("p",[s._v("它可以用来检查当前的工作树，如果不通过某些测试，则拒绝提交。")]),s._v(" "),e("p",[s._v("默认的"),e("code",[s._v("pre-applypatch")]),s._v("钩子在启用时运行"),e("code",[s._v("pre-commit")]),s._v("钩子（如果后者已启用）。")]),s._v(" "),e("p",[s._v("3."),e("code",[s._v("post-applypatch")]),s._v("(应用程序批处理后)"),e("br"),s._v("\n这个钩子由"),e("a",{attrs:{href:"https://git-scm.com/docs/git-am",target:"_blank",rel:"noopener noreferrer"}},[s._v("git am"),e("OutboundLink")],1),s._v("调用。它不接受任何参数，在应用补丁程序并提交之后调用。")]),s._v(" "),e("p",[s._v("这个钩子主要用于通知，不能影响"),e("code",[s._v("git am")]),s._v("的结果。")]),s._v(" "),e("p",[s._v("4."),e("code",[s._v("pre-commit")]),s._v("(预先提交)"),e("br"),s._v("\n这个钩子由"),e("a",{attrs:{href:"https://git-scm.com/docs/git-commit",target:"_blank",rel:"noopener noreferrer"}},[s._v("git commit"),e("OutboundLink")],1),s._v("调用，可以使用"),e("code",[s._v("--no-verify")]),s._v("选项绕过它。它不接受任何参数，并在获取建议的提交日志消息和进行提交之前被调用。从这个脚本中退出非零状态会导致"),e("code",[s._v("git commit")]),s._v("命令在创建提交之前中止。")]),s._v(" "),e("p",[s._v("默认的"),e("code",[s._v("pre-commit")]),s._v("挂钩（如果启用）捕获带有尾随空白的行的引入，并在找到此类行时中止提交。")]),s._v(" "),e("p",[s._v("如果命令不会打开编辑器来修改提交消息，则使用环境变量 "),e("code",[s._v("GIT_EDITOR=:")]),s._v(" 调用所有"),e("code",[s._v("git commit")]),s._v("挂钩。")]),s._v(" "),e("p",[s._v("当启用"),e("code",[s._v("hooks.allownonascii")]),s._v("配置选项"),e("code",[s._v("unset")]),s._v("或设置为"),e("code",[s._v("false")]),s._v("时，默认的"),e("code",[s._v("pre-commit")]),s._v("挂钩将阻止使用非ASCII文件名。")]),s._v(" "),e("p",[s._v("5."),e("code",[s._v("pre-merge-commit")]),s._v("(合并前提交)"),e("br"),s._v("\n这个钩子由"),e("a",{attrs:{href:"https://git-scm.com/docs/git-merge",target:"_blank",rel:"noopener noreferrer"}},[s._v("git merge[1]"),e("OutboundLink")],1),s._v("调用，可以使用"),e("code",[s._v("--no-verify")]),s._v("选项绕过它。它不接受任何参数，并在合并成功执行之后和获取建议的提交日志消息以进行提交之前调用。从这个脚本中退出非零状态会导致Git合并命令在创建提交之前中止。")]),s._v(" "),e("p",[s._v("如果启用了"),e("code",[s._v("pre-merge-commit")]),s._v("挂钩，则默认的预合并提交挂钩将运行"),e("code",[s._v("pre-commit")]),s._v("挂钩。")]),s._v(" "),e("p",[s._v("如果命令不会调出编辑器来修改提交消息，则使用环境变量"),e("code",[s._v("GIT_EDITOR=:")]),s._v("调用此挂钩。")]),s._v(" "),e("p",[s._v("如果无法自动执行合并，则需要解决冲突并单独提交结果（参见"),e("a",{attrs:{href:"https://git-scm.com/docs/git-merge",target:"_blank",rel:"noopener noreferrer"}},[s._v("git merge"),e("OutboundLink")],1),s._v("）。此时，将不会执行此挂钩，但如果启用了"),e("code",[s._v("pre-commit")]),s._v("挂钩，则会执行它。")]),s._v(" "),e("p",[s._v("6."),e("code",[s._v("prepare-commit-msg")]),s._v("(准备提交消息)"),e("br"),s._v(" "),e("a",{attrs:{href:"https://git-scm.com/docs/git-commit",target:"_blank",rel:"noopener noreferrer"}},[s._v("git commit"),e("OutboundLink")],1),s._v("在准备默认日志消息之后，在启动编辑器之前调用此钩子。")]),s._v(" "),e("p",[s._v("它需要一到三个参数。第一个是包含提交日志消息的文件的名称。第二个是提交消息的来源，可以是："),e("code",[s._v("message")]),s._v("（如果给出了"),e("code",[s._v("-m")]),s._v("或"),e("code",[s._v("-F")]),s._v("选项）；"),e("code",[s._v("template")]),s._v("（如果给出了"),e("code",[s._v("-t")]),s._v("选项或配置选项"),e("code",[s._v("commit.template")]),s._v("）；"),e("code",[s._v("merge")]),s._v("（如果提交是合并或"),e("code",[s._v(".git/MERGE_MSG")]),s._v("文件）；"),e("code",[s._v("squash")]),s._v("（如果"),e("code",[s._v(".git/SQUASH_MSG")]),s._v("文件存在）；或"),e("code",[s._v("commit")]),s._v("，接着是提交SHA-1（如果是"),e("code",[s._v("-c")]),s._v("，"),e("code",[s._v("-C")]),s._v("）或者"),e("code",[s._v("--amend")]),s._v(" 选项）。")]),s._v(" "),e("p",[s._v("如果退出状态为非零，则"),e("code",[s._v("git commit")]),s._v("将中止。")]),s._v(" "),e("p",[s._v("钩子的目的是就地编辑消息文件，而"),e("code",[s._v("--no-verify")]),s._v("选项不禁止它。非零退出意味着钩子失败，并中止提交。它不应该用作预提交挂钩的替换。")]),s._v(" "),e("p",[s._v("Git附带的"),e("code",[s._v("prepare-commit-msg")]),s._v("钩子示例删除了commit模板注释部分中的帮助消息。")]),s._v(" "),e("p",[s._v("7."),e("code",[s._v("commit-msg")]),s._v("(提交信息)"),e("br"),s._v("\n这个钩子由"),e("a",{attrs:{href:"https://git-scm.com/docs/git-commit",target:"_blank",rel:"noopener noreferrer"}},[s._v("git commit"),e("OutboundLink")],1),s._v("和"),e("a",{attrs:{href:"https://git-scm.com/docs/git-merge",target:"_blank",rel:"noopener noreferrer"}},[s._v("git merge"),e("OutboundLink")],1),s._v("调用，可以使用"),e("code",[s._v("--no-verify")]),s._v("选项绕过它。它接受一个参数，即保存建议的提交日志消息的文件的名称。退出非零状态会导致命令中止。")]),s._v(" "),e("p",[s._v("允许钩子就地编辑消息文件，并可用于将消息规范化为某些项目标准格式。它还可用于在检查消息文件后拒绝提交。")]),s._v(" "),e("p",[s._v("默认的"),e("code",[s._v("commit-msg")]),s._v(" hook在启用时检测到重复的"),e("code",[s._v("Signed-off-by")]),s._v("行，如果找到一行，则中止提交。")]),s._v(" "),e("p",[s._v("8."),e("code",[s._v("post-commit")]),s._v("(提交后)"),e("br"),s._v("\n这个钩子由"),e("a",{attrs:{href:"https://git-scm.com/docs/git-commit",target:"_blank",rel:"noopener noreferrer"}},[s._v("git commit"),e("OutboundLink")],1),s._v("调用。它不接受任何参数，并在提交后调用。")]),s._v(" "),e("p",[s._v("这个钩子主要用于通知，不能影响"),e("code",[s._v("git commit")]),s._v("的结果。")]),s._v(" "),e("p",[s._v("9."),e("code",[s._v("pre-rebase")]),s._v("(变基前)"),e("br"),s._v("\n这个钩子由"),e("a",{attrs:{href:"https://git-scm.com/docs/git-rebase",target:"_blank",rel:"noopener noreferrer"}},[s._v("git rebase"),e("OutboundLink")],1),s._v("调用，可用于防止分支重新定位。可以使用一个或两个参数调用钩子。第一个参数是派生序列的上游。第二个参数是正在重设基的分支，重设基当前分支时不设置该参数。")]),s._v(" "),e("p",[s._v("10."),e("code",[s._v("post-checkout")]),s._v("(结账后)"),e("br"),s._v("\n更新工作树后运行"),e("a",{attrs:{href:"https://git-scm.com/docs/git-checkout",target:"_blank",rel:"noopener noreferrer"}},[s._v("git checkout"),e("OutboundLink")],1),s._v("或"),e("a",{attrs:{href:"https://git-scm.com/docs/git-switch",target:"_blank",rel:"noopener noreferrer"}},[s._v("git switch"),e("OutboundLink")],1),s._v("时，将调用此挂钩。钩子有三个参数：前一个HEAD的ref，新HEAD的ref（可能已经更改，也可能没有更改）和一个标志，指示签出是分支签出（更改分支，flag=1）还是文件签出（从索引中检索文件，flag=0）。此挂钩不会影响"),e("code",[s._v("git switch")]),s._v("或"),e("code",[s._v("git checkout")]),s._v("的结果。")]),s._v(" "),e("p",[s._v("它也在"),e("a",{attrs:{href:"https://git-scm.com/docs/git-clone",target:"_blank",rel:"noopener noreferrer"}},[s._v("git clone[1]"),e("OutboundLink")],1),s._v("之后运行，除非使用"),e("code",[s._v("--no-checkout")]),s._v("（"),e("code",[s._v("-n")]),s._v("）选项。给钩子的第一个参数是空ref，第二个参数是新头的ref，标志总是1。同样，对于"),e("code",[s._v("git worktree add")]),s._v("，除非"),e("code",[s._v("--no-checkout")]),s._v("签出。")]),s._v(" "),e("p",[s._v("此钩子可用于执行存储库有效性检查、自动显示与前一个HEAD的差异（如果不同）或设置工作目录元数据属性。")]),s._v(" "),e("p",[s._v("11."),e("code",[s._v("post-merge")]),s._v("(合并后)"),e("br"),s._v("\n这个钩子由"),e("a",{attrs:{href:"https://git-scm.com/docs/git-merge",target:"_blank",rel:"noopener noreferrer"}},[s._v("git merge"),e("OutboundLink")],1),s._v("调用，当在本地存储库上完成"),e("code",[s._v("git pull")]),s._v("时就会发生这种情况。钩子接受一个参数，一个状态标志，指定正在进行的合并是否是挤压合并。如果合并由于冲突而失败，则此挂钩不会影响"),e("code",[s._v("git merge")]),s._v("的结果，也不会执行。")]),s._v(" "),e("p",[s._v("此钩子可与相应的预提交钩子结合使用，以保存和还原与工作树相关联的任何形式的元数据（例如：permissions/ownership, ACLS等）。请参阅contrib/hooks/setgitperms.perl，以获取如何执行此操作的示例。")]),s._v(" "),e("p",[s._v("12."),e("code",[s._v("pre-push")]),s._v("(预推)"),e("br"),s._v("\n这个钩子被"),e("a",{attrs:{href:"https://git-scm.com/docs/git-push",target:"_blank",rel:"noopener noreferrer"}},[s._v("git push"),e("OutboundLink")],1),s._v("调用，可以用来防止发生push。使用两个参数调用钩子，这两个参数提供目标远程的名称和位置，如果未使用命名远程，则两个值将相同。")]),s._v(" "),e("p",[s._v("有关要推送的内容的信息在钩子的标准输入中提供，输入行如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("<local ref> SP <local sha1> SP <remote ref> SP <remote sha1> LF\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("例如，如果运行"),e("code",[s._v("git push origin master:foreign")]),s._v("命令，钩子将收到如下行：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("refs/heads/master 67890 refs/heads/foreign 12345\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("尽管将提供完整的、40个字符的SHA-1。如果外部参考还不存在，"),e("code",[s._v("<remote SHA-1>")]),s._v(" 将是40 "),e("code",[s._v("0")]),s._v("。如果要删除引用，"),e("code",[s._v("<local ref>")]),s._v("将作为（"),e("code",[s._v("delete")]),s._v("）提供，"),e("code",[s._v("<remote SHA-1>")]),s._v("将为40 "),e("code",[s._v("0")]),s._v("。如果本地提交不是由可扩展的名称（如"),e("code",[s._v("HEAD~")]),s._v("或"),e("code",[s._v("SHA-1")]),s._v("）指定的，则将按最初的给定方式提供。")]),s._v(" "),e("p",[s._v("如果这个钩子退出非零状态，"),e("code",[s._v("git push")]),s._v("将中止而不推任何东西。有关拒绝推送的原因的信息可以通过写入标准错误发送给用户。")]),s._v(" "),e("p",[s._v("13."),e("code",[s._v("pre-receive")]),s._v("(预先接收)"),e("br"),s._v("\n当"),e("a",{attrs:{href:"https://git-scm.com/docs/git-receive-pack",target:"_blank",rel:"noopener noreferrer"}},[s._v("git-receive-pack"),e("OutboundLink")],1),s._v("对其存储库中的"),e("code",[s._v("git push")]),s._v("和updates引用作出反应时，它将调用此钩子。在开始更新远程存储库上的refs之前，将调用预接收挂钩。它的退出状态决定了更新的成功或失败。")]),s._v(" "),e("p",[s._v("对于接收操作，此钩子执行一次。它不需要参数，但是对于每个要更新的ref，它在标准输入上接收一行格式：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("<old-value> SP <new-value> SP <ref-name> LF\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("其中，"),e("code",[s._v("<old-value>")]),s._v("是存储在ref中的旧对象名，"),e("code",[s._v("<new-value>")]),s._v("是存储在ref中的新对象名，"),e("code",[s._v("<ref-name>")]),s._v("是ref的全名。创建新ref时，"),e("code",[s._v("<old-value>")]),s._v("是40 "),e("code",[s._v("0")]),s._v("。")]),s._v(" "),e("p",[s._v("如果钩子退出非零状态，则不会更新任何参考文件。如果钩子以0退出，则更新钩子仍然可以防止单个引用的更新。")]),s._v(" "),e("p",[s._v("标准输出和标准错误输出都被转发到另一端的"),e("code",[s._v("git send-pack")]),s._v("，因此您可以简单地为用户回显消息。")]),s._v(" "),e("p",[s._v("git push命令行中给定的push选项数"),e("code",[s._v("--push-option=...")]),s._v(" 可以从环境变量"),e("code",[s._v("GIT_PUSH_OPTION_COUNT")]),s._v("中读取，选项本身位于"),e("code",[s._v("GIT_PUSH_OPTION_0")]),s._v("，"),e("code",[s._v("GIT_PUSH_OPTION_1")]),s._v("，…中。如果协商不使用PUSH options阶段，则不会设置环境变量。如果客户端选择使用push选项，但不传输任何选项，则"),e("code",[s._v("count")]),s._v("变量将设置为零，"),e("code",[s._v("GIT_push_OPTION_count=0")]),s._v("。")]),s._v(" "),e("p",[s._v("有关一些注意事项，请参阅"),e("a",{attrs:{href:"https://git-scm.com/docs/git-receive-pack",target:"_blank",rel:"noopener noreferrer"}},[s._v("git-receive-pack"),e("OutboundLink")],1),s._v("中关于“隔离环境”的部分。")]),s._v(" "),e("p",[s._v("14."),e("code",[s._v("update")]),s._v("(更新)"),e("br"),s._v("\n当"),e("a",{attrs:{href:"https://git-scm.com/docs/git-receive-pack",target:"_blank",rel:"noopener noreferrer"}},[s._v("git-receive-pack"),e("OutboundLink")],1),s._v("对其存储库中的"),e("code",[s._v("git push")]),s._v("和updates引用作出反应时，它将调用此钩子。就在更新远程存储库上的ref之前，会调用更新挂钩。它的退出状态决定了REF更新的成败。")]),s._v(" "),e("p",[s._v("钩子对每个要更新的ref执行一次，并接受3个参数：")]),s._v(" "),e("ul",[e("li",[s._v("正在更新的ref的名称，")]),s._v(" "),e("li",[s._v("存储在ref中的旧对象名，")]),s._v(" "),e("li",[s._v("以及要存储在ref中的新对象名。")])]),s._v(" "),e("p",[s._v("从更新钩子的零出口允许REF被更新。退出非零状态阻止"),e("code",[s._v("git receive-pack")]),s._v("更新REF。")]),s._v(" "),e("p",[s._v("通过确保对象名是commit对象（commit对象是由旧对象名命名的commit对象的后代），此钩子可用于防止强制更新某些ref。也就是说，执行“仅限快进”政策。")]),s._v(" "),e("p",[s._v("它还可以用来记录旧的..新的状态。但是，它不知道整个分支集，因此在天真地使用时，它最终会为每个ref触发一封电子邮件。"),e("code",[s._v("post-receive")]),s._v("钩子更适合这种情况。")]),s._v(" "),e("p",[s._v("在一个仅限制用户通过网络访问git命令的环境中，此钩子可用于实现访问控制，而不依赖文件系统所有权和组成员资格。请参阅"),e("a",{attrs:{href:"https://git-scm.com/docs/git-shell",target:"_blank",rel:"noopener noreferrer"}},[s._v("git shell"),e("OutboundLink")],1),s._v("了解如何使用登录shell限制用户仅访问git命令。")]),s._v(" "),e("p",[s._v("标准输出和标准错误输出都被转发到另一端的"),e("code",[s._v("git send-pack")]),s._v("，因此您可以简单地为用户回显消息。")]),s._v(" "),e("p",[s._v("默认的"),e("code",[s._v("update")]),s._v(" hook在启用时，如果"),e("code",[s._v("hooks.allowunannotated")]),s._v(" config选项未设置或设置为"),e("code",[s._v("false")]),s._v("，则会阻止推送未注释的标记。")]),s._v(" "),e("p",[s._v("15."),e("code",[s._v("post-receive")]),s._v("(接收后)"),e("br"),s._v("\n当"),e("a",{attrs:{href:"https://git-scm.com/docs/git-receive-pack",target:"_blank",rel:"noopener noreferrer"}},[s._v("git-receive-pack"),e("OutboundLink")],1),s._v("对其存储库中的"),e("code",[s._v("git push")]),s._v("和updates引用作出反应时，它将调用此钩子。在更新所有ref之后，它在远程存储库上执行一次。")]),s._v(" "),e("p",[s._v("对于接收操作，此钩子执行一次。它不接受参数，但获取的信息与"),e("code",[s._v("pre-receive")]),s._v("钩子在其标准输入上所做的相同。")]),s._v(" "),e("p",[s._v("这个钩子不会影响"),e("code",[s._v("git receive-pack")]),s._v("的结果，因为它是在实际工作完成后调用的。")]),s._v(" "),e("p",[s._v("这将取代"),e("code",[s._v("post-update")]),s._v("挂钩，因为它除了获取所有ref的名称外，还获取它们的旧值和新值。")]),s._v(" "),e("p",[s._v("标准输出和标准错误输出都被转发到另一端的"),e("code",[s._v("git send-pack")]),s._v("，因此您可以简单地为用户回显消息。")]),s._v(" "),e("p",[s._v("默认的"),e("code",[s._v("post-receive")]),s._v("钩子是空的，但是Git发行版的"),e("code",[s._v("contrib/hooks")]),s._v("目录中提供了一个示例脚本"),e("code",[s._v("post-receive email")]),s._v("，它实现了发送提交电子邮件。")]),s._v(" "),e("p",[s._v("git push命令行中给定的push选项数"),e("code",[s._v("--push-option=...")]),s._v("可以从环境变量"),e("code",[s._v("GIT_PUSH_OPTION_COUNT")]),s._v("中读取，选项本身位于"),e("code",[s._v("GIT_PUSH_OPTION_0")]),s._v("，"),e("code",[s._v("GIT_PUSH_OPTION_1")]),s._v("，…中。如果协商不使用PUSH options阶段，则不会设置环境变量。如果客户端选择使用push选项，但不传输任何选项，则count变量将设置为零，"),e("code",[s._v("GIT_push_OPTION_count=0")]),s._v("。")]),s._v(" "),e("p",[s._v("16."),e("code",[s._v("post-update")]),s._v("(更新后)"),e("br"),s._v("\n当"),e("a",{attrs:{href:"https://git-scm.com/docs/git-receive-pack",target:"_blank",rel:"noopener noreferrer"}},[s._v("git-receive-pack"),e("OutboundLink")],1),s._v("对其存储库中的"),e("code",[s._v("git push")]),s._v("和updates引用作出反应时，它将调用此钩子。在更新所有ref之后，它在远程存储库上执行一次。")]),s._v(" "),e("p",[s._v("它接受可变数量的参数，每个参数都是实际更新的ref的名称。")]),s._v(" "),e("p",[s._v("此钩子主要用于通知，不能影响"),e("code",[s._v("git receive-pack")]),s._v("的结果。")]),s._v(" "),e("p",[e("code",[s._v("post-update")]),s._v("钩子可以告诉推送的头是什么，但是它不知道它们的原始值和更新值是什么，所以它是一个很糟糕的地方来记录旧的..新的。"),e("code",[s._v("post-receive")]),s._v("钩子获取refs的原始值和更新值。如果你需要的话，你可以考虑一下。")]),s._v(" "),e("p",[s._v("启用后，默认的"),e("code",[s._v("post-update")]),s._v("挂钩运行"),e("code",[s._v("git update-server-info")]),s._v(" 以保持dumb transports（例如HTTP）使用的信息是最新的。如果您要发布一个可以通过HTTP访问的Git存储库，那么您可能应该启用这个钩子。")]),s._v(" "),e("p",[s._v("标准输出和标准错误输出都被转发到另一端的"),e("code",[s._v("git send-pack")]),s._v("，因此您可以简单地为用户回显消息。")]),s._v(" "),e("p",[s._v("17."),e("code",[s._v("push-to-checkout")]),s._v("(推送至结帐)"),e("br"),s._v("\n当"),e("a",{attrs:{href:"https://git-scm.com/docs/git-receive-pack",target:"_blank",rel:"noopener noreferrer"}},[s._v("git-receive-pack"),e("OutboundLink")],1),s._v("对其存储库中的"),e("code",[s._v("git push")]),s._v("和update s引用作出反应，并且当push尝试更新当前签出的分支并且"),e("code",[s._v("receive.denyCurrentBranch")]),s._v("配置变量设置为"),e("code",[s._v("updateInstead")]),s._v(" 时，它将调用此钩子。如果工作树和远程存储库的索引与当前签出的提交有任何差异，则默认情况下拒绝此类推送；当工作树和索引都与当前提交匹配时，它们将更新以匹配分支的新推送提示。此钩子将用于重写默认行为。")]),s._v(" "),e("p",[s._v("钩子接收当前分支的提示将被更新的提交。它可以以非零状态退出拒绝推送（当它这样做时，它不必修改索引或工作树）。或者，当当前分支的尖端被更新为新的提交，并以零状态退出时，它可以对工作树和索引进行任何必要的更改，以使它们达到所希望的状态。")]),s._v(" "),e("p",[s._v("例如，钩子可以简单地运行"),e("code",[s._v('git read-tree -u -m HEAD "$1"')]),s._v("，以模拟git push反向运行的"),e("code",[s._v("git fetch")]),s._v("，因为"),e("code",[s._v("git read tree -u -m")]),s._v("的两种树形式本质上与"),e("code",[s._v("git switch")]),s._v("或"),e("code",[s._v("git checkout")]),s._v("相同，后者切换分支，同时保持工作树中不干扰的本地更改树枝之间的差别。")]),s._v(" "),e("p",[s._v("18."),e("code",[s._v("pre-auto-gc")]),s._v("(前自动gc)"),e("br"),s._v("\n这个钩子由"),e("code",[s._v("git gc --auto")]),s._v("调用（参见"),e("a",{attrs:{href:"https://git-scm.com/docs/git-gc",target:"_blank",rel:"noopener noreferrer"}},[s._v("git gc"),e("OutboundLink")],1),s._v("）。它不需要任何参数，并且从这个脚本中退出非零状态，导致"),e("code",[s._v("git gc --auto")]),s._v("中止。")]),s._v(" "),e("p",[s._v("19."),e("code",[s._v("post-rewrite")]),s._v("(重写后)"),e("br"),s._v("\n此钩子由重写提交的命令调用（使用"),e("code",[s._v("--amend")]),s._v("和"),e("a",{attrs:{href:"https://git-scm.com/docs/git-rebase",target:"_blank",rel:"noopener noreferrer"}},[s._v("git rebase"),e("OutboundLink")],1),s._v("调用"),e("a",{attrs:{href:"https://git-scm.com/docs/git-commit",target:"_blank",rel:"noopener noreferrer"}},[s._v("git commit"),e("OutboundLink")],1),s._v("；但是，"),e("a",{attrs:{href:"https://git-scm.com/docs/git-fast-import",target:"_blank",rel:"noopener noreferrer"}},[s._v("git fast-import"),e("OutboundLink")],1),s._v("或"),e("a",{attrs:{href:"https://github.com/newren/git-filter-repo",target:"_blank",rel:"noopener noreferrer"}},[s._v("git filter-repo"),e("OutboundLink")],1),s._v("之类的完整历史（重新）编写工具通常不会调用它！）。它的第一个参数表示它被调用的命令：当前是"),e("code",[s._v("amend")]),s._v(" 或"),e("code",[s._v("rebase")]),s._v("之一。将来可能会传递更多依赖命令的参数。")]),s._v(" "),e("p",[s._v("钩子接收stdin上重写的提交列表，格式如下")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("<old-sha1> SP <new-sha1> [ SP <extra-info> ] LF\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[e("code",[s._v("extra-info")]),s._v("同样依赖于命令。如果为空，则前面的SP也将被忽略。目前，没有命令传递任何"),e("code",[s._v("extra-info")]),s._v("。")]),s._v(" "),e("p",[s._v("钩子总是在自动复制便笺之后运行（参见"),e("a",{attrs:{href:"https://git-scm.com/docs/git-config",target:"_blank",rel:"noopener noreferrer"}},[s._v("git config"),e("OutboundLink")],1),s._v("中的“"),e("code",[s._v("notes.rewrite.<command>")]),s._v("”），因此可以访问这些便笺。")]),s._v(" "),e("p",[s._v("以下命令特定注释适用："),e("br"),s._v(" "),e("code",[s._v("rebase")]),e("br"),s._v("\n对于"),e("code",[s._v("squash")]),s._v("和"),e("code",[s._v("fixup")]),s._v("操作，所有挤压的提交都将被列为被重写为挤压的提交。这意味着将有多条线路共享同一个"),e("code",[s._v("new-sha1")]),s._v("。"),e("br"),s._v("\n保证提交按rebase处理的顺序列出。")]),s._v(" "),e("p",[s._v("20."),e("code",[s._v("sendemail-validate")]),s._v("(发送电子邮件验证)"),e("br"),s._v("\n此钩子由"),e("a",{attrs:{href:"https://git-scm.com/docs/git-send-email",target:"_blank",rel:"noopener noreferrer"}},[s._v("git send-email[1]"),e("OutboundLink")],1),s._v("调用。它只接受一个参数，即保存要发送的电子邮件的文件的名称。退出非零状态导致"),e("code",[s._v("git send-email")]),s._v("在发送任何电子邮件之前中止。")]),s._v(" "),e("p",[s._v("21."),e("code",[s._v("fsmonitor-watchman")]),s._v("(监听看守者)"),e("br"),s._v("\n当配置选项"),e("code",[s._v("core.fsmonitor")]),s._v("设置为"),e("code",[s._v(".git/hooks/fsmonitor-watchman")]),s._v("时，将调用此钩子。它需要两个参数，一个版本（当前为1）和自1970年1月1日午夜以来以纳秒为单位的时间。")]),s._v(" "),e("p",[s._v("钩子应该输出到stdout工作目录中自请求时间以来可能已更改的所有文件的列表。逻辑应该是包含的，这样就不会遗漏任何潜在的更改。这些路径应该相对于工作目录的根目录，并由单个NUL分隔。")]),s._v(" "),e("p",[s._v("可以包含没有实际更改的文件。应包括所有更改，包括新创建和删除的文件。重命名文件时，应同时包含旧名称和新名称。")]),s._v(" "),e("p",[s._v("Git将根据给定的路径名限制它检查哪些文件进行更改，以及检查哪些目录以查找未跟踪的文件。")]),s._v(" "),e("p",[s._v("告诉git“所有文件都已更改”的一种优化方法是返回filename"),e("code",[s._v("/")]),s._v("。")]),s._v(" "),e("p",[s._v("退出状态决定Git是否使用钩子中的数据来限制其搜索。出错时，它将返回到验证所有文件和文件夹。")]),s._v(" "),e("p",[s._v("22."),e("code",[s._v("p4-pre-submit")]),s._v("(p4预先提交)"),e("br"),s._v("\n此钩子由"),e("code",[s._v("git-p4 submit")]),s._v("调用。它不接受任何参数，也不接受标准输入。从脚本中退出非零状态，防止"),e("code",[s._v("git-p4 submit")]),s._v("从启动提交。运行"),e("code",[s._v("git-p4 submit --help")]),s._v("获取详细信息。")]),s._v(" "),e("p",[s._v("23."),e("code",[s._v("post-index-change")]),s._v("(索引后变化)"),e("br"),s._v("\n当索引写入读缓存时调用此挂钩。c do_write_locked_index。")]),s._v(" "),e("p",[s._v("传递给钩子的第一个参数是正在更新的工作目录的指示符。“1”表示工作目录已更新，或“0”表示工作目录未更新。")]),s._v(" "),e("p",[s._v("传递给钩子的第二个参数是指示索引是否已更新以及跳过工作树位是否已更改的指示器。”“1”表示跳过工作树位可能已更新，“0”表示它们未更新。")]),s._v(" "),e("p",[s._v("钩子运行时，只有一个参数应设置为“1”。吊钩不应通过“1”、“1”。")]),s._v(" "),e("h2",{attrs:{id:"常用钩子有哪些"}},[s._v("常用钩子有哪些")]),s._v(" "),e("p",[s._v("就像上面说的，那么多钩子我们不是都会用到，下面就介绍几个经常用到的钩子，举例说明一下。")]),s._v(" "),e("h3",{attrs:{id:"客户端-hooks"}},[s._v("客户端 Hooks")]),s._v(" "),e("p",[s._v("客户端钩子只影响它们所在的本地仓库。有许多客户端挂钩，以下把他们分为：提交工作流挂钩、电子邮件工作流挂钩及其他客户端挂钩。")]),s._v(" "),e("h4",{attrs:{id:"_1-提交工作流挂钩"}},[s._v("1.提交工作流挂钩")]),s._v(" "),e("p",[s._v("commit操作有 4个挂钩被用来处理提交的过程，他们的触发时间顺序如下："),e("br"),s._v(" "),e("code",[s._v("pre-commit")]),s._v("、"),e("code",[s._v("prepare-commit-msg")]),s._v("、"),e("code",[s._v("commit-msg")]),s._v("、"),e("code",[s._v("post-commit")])]),s._v(" "),e("p",[e("strong",[s._v("pre-commit")]),e("br"),s._v(" "),e("code",[s._v("pre-commit")]),s._v(" 挂钩在键入提交信息前运行，最先触发运行的脚本。被用来检查即将提交的代码快照。**例如，检查是否有东西被遗漏、运行一些自动化测试、以及检查代码规范。**当从该挂钩返回非零值时，Git 放弃此次提交，但可以用"),e("code",[s._v("git commit --no-verify")]),s._v("来忽略。"),e("strong",[s._v("该挂钩可以被用来检查代码错误，检查代码格式规范，检查尾部空白（默认挂钩是这么做的），检查新方法（译注：程序的函数）的说明。")])]),s._v(" "),e("p",[s._v("pre-commit 不需要任何参数，以非零值退出时将放弃整个提交。这里，我们用 “强制代码格式校验” 来说明。")]),s._v(" "),e("p",[e("strong",[s._v("prepare-commit-msg")]),e("br"),s._v(" "),e("code",[s._v("prepare-commit-msg")]),s._v(" 挂钩在提交信息编辑器显示之前，默认信息被创建之后运行，它和 "),e("code",[s._v("pre-commit")]),s._v(" 一样，以非零值退出会放弃提交。因此，可以有机会在提交作者看到默认信息前进行编辑。该挂钩接收一些选项：拥有提交信息的文件路径，提交类型。例如和提交模板配合使用，以编程的方式插入信息。提交信息模板的提示修改在上面已经看到了，现在我们来看一个更有用的脚本。在处理需要单独开来的bug时，我们通常在单独的分支上处理issue。如果你在分支名中包含了issue编号，你可以使用"),e("code",[s._v("prepare-commit-msg")]),s._v("钩子来自动地将它包括在那个分支的每个提交信息中。")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" sys"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" os"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" re\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" subprocess "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" check_output\n\n\ncommit_msg_filepath "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sys"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("argv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sys"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("argv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    commit_type "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sys"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("argv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    commit_type "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sys"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("argv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    commit_hash "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sys"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("argv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    commit_hash "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"prepare-commit-msg: File: %s\\nType: %s\\nHash: %s"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("commit_msg_filepath"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" commit_type"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" commit_hash"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n\nbranch "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" check_output"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'symbolic-ref'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'--short'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'HEAD'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("strip"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"prepare-commit-msg: On branch '%s'\"")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" branch\n\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" branch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("startswith"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'issue-'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"prepare-commit-msg: Oh hey, it\'s an issue branch."')]),s._v("\n    result "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" re"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("match"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'issue-(.*)'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" branch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    issue_number "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("group"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("open")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("commit_msg_filepath"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'r+'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" f"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        content "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" f"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("read"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        f"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("seek"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        f"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("write"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ISSUE-%s %s"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("issue_number"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" content"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br")])]),e("p",[s._v("首先，上面的"),e("code",[s._v("prepare-commit-msg")]),s._v(" 钩子告诉你如何收集传入脚本的所有参数。接下来，它调用了"),e("code",[s._v("git symbolic-ref --short HEAD")]),s._v(" 来获取对应HEAD的分支名。如果分支名以issue-开头，它会重写提交信息文件，在第一行加上issue编号。比如你的分支名issue-224，下面的提交信息将会生成:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("ISSUE-224 \n\n# Please enter the commit message for your changes. Lines starting \n# with '#' will be ignored, and an empty message aborts the commit. \n# On branch issue-224 \n# Changes to be committed: \n# modified:   test.txt\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("有一点要记住的是即使用户用"),e("code",[s._v("-m")]),s._v("传入提交信息，"),e("code",[s._v("prepare-commit-msg")]),s._v("也会运行。也就是说，上面这个脚本会自动插入"),e("code",[s._v("ISSUE-[#]")]),s._v("字符串，而用户无法更改。你可以检查第二个参数是否是提交类型来处理这个情况。但是，如果没有-m选项，"),e("code",[s._v("prepare-commit-msg")]),s._v("钩子允许用户修改生成后的提交信息。所以这个脚本的目的是为了方便，而不是推行强制的提交信息规范。如果你要这么做，你需要下面所讲的"),e("code",[s._v("commit-msg")]),s._v("钩子。")]),s._v(" "),e("p",[e("strong",[s._v("commit-msg")]),e("br"),s._v(" "),e("code",[s._v("commit-msg")]),s._v("钩子和"),e("code",[s._v("prepare-commit-msg")]),s._v("钩子很像，但它会在用户输入提交信息之后被调用。这适合用来提醒开发者他们的提交信息不符合你团队的规范。传入这个钩子唯一的参数是包含提交信息的文件名。如果它不喜欢用户输入的提交信息，它可以在原地修改这个文件（和"),e("code",[s._v("prepare-commit-msg")]),s._v("一样），或者它会以非零值退出，放弃这个提交。比如说，下面这个脚本确认用户没有删除"),e("code",[s._v("prepare-commit-msg")]),s._v("脚本自动生成的"),e("code",[s._v("ISSUE-[#]")]),s._v("字符串。")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" sys"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" os"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" re\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" subprocess "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" check_output\n\n\ncommit_msg_filepath "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sys"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("argv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n\nbranch "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" check_output"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'symbolic-ref'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'--short'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'HEAD'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("strip"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"commit-msg: On branch '%s'\"")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" branch\n\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" branch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("startswith"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'issue-'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"commit-msg: Oh hey, it\'s an issue branch."')]),s._v("\n    result "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" re"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("match"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'issue-(.*)'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" branch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    issue_number "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("group"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    required_message "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ISSUE-%s"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" issue_number\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("open")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("commit_msg_filepath"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'r'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" f"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        content "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" f"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("read"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" content"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("startswith"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("required_message"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"commit-msg: ERROR! The commit message must start with '%s'\"")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" required_message\n            sys"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("exit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br")])]),e("p",[e("strong",[s._v("post-commit")]),e("br"),s._v(" "),e("code",[s._v("post-commit")]),s._v(" 挂钩在整个提交过程完成后运行，他不会接收任何参数，但可以运行"),e("code",[s._v("git log")]),s._v("来获得最后的提交信息。总之，该挂钩是作为通知之类使用的。虽然可以用"),e("code",[s._v("post-commit")]),s._v("来触发本地的持续集成系统，但大多数时候你想用的是"),e("code",[s._v("post-receive")]),s._v("这个钩子。它运行在服务端而不是用户的本地机器，它同样在任何开发者推送代码时运行。那里更适合进行持续集成。")]),s._v(" "),e("p",[s._v("提交工作流的客户端挂钩脚本可以在任何工作流中使用，他们经常被用来实施某些策略，但值得注意的是，这些脚本在clone期间不会被传送。可以在服务器端实施策略来拒绝不符合某些策略的推送，但这完全取决于开发者在客户端使用这些脚本的情况。所以，这些脚本对开发者是有用的，由他们自己设置和维护，而且在任何时候都可以覆盖或修改这些脚本，后面讲如何把这部分东西也集成到开发流中。")]),s._v(" "),e("h4",{attrs:{id:"_2-e-mail工作流挂钩"}},[s._v("2.E-mail工作流挂钩")]),s._v(" "),e("p",[s._v("有3个可用的客户端挂钩用于e-mail工作流。当运行 "),e("code",[s._v("git am")]),s._v(" 命令时，会调用他们，因此，如果你没有在工作流中用到此命令，可以跳过本节。如果你通过e-mail接收由 "),e("code",[s._v("git format-patch")]),s._v(" 产生的补丁，这些挂钩也许对你有用。")]),s._v(" "),e("p",[s._v("首先运行的是 "),e("code",[s._v("applypatch-msg")]),s._v(" 挂钩，他接收一个参数：包含被建议提交信息的临时文件名。如果该脚本非零退出，Git 放弃此补丁。可以使用这个脚本确认提交信息是否被正确格式化，或让脚本编辑信息以达到标准化。")]),s._v(" "),e("p",[s._v("下一个在 "),e("code",[s._v("git am")]),s._v(" 运行期间调用是 "),e("code",[s._v("pre-applypatch")]),s._v(" 挂钩。该挂钩不接收参数，在补丁被运用之后运行，因此，可以被用来在提交前检查快照。你能用此脚本运行测试，检查工作树。如果有些什么遗漏，或测试没通过，脚本会以非零退出，放弃此次"),e("code",[s._v("git am")]),s._v("的运行，补丁不会被提交。")]),s._v(" "),e("p",[s._v("最后在"),e("code",[s._v("git am")]),s._v("运行期间调用的是 "),e("code",[s._v("post-applypatch")]),s._v(" 挂钩。你可以用他来通知一个小组或获取的补丁的作者，但无法阻止打补丁的过程。")]),s._v(" "),e("h4",{attrs:{id:"_3-其他客户端挂钩"}},[s._v("3.其他客户端挂钩")]),s._v(" "),e("p",[e("strong",[s._v("pre-rebase")]),e("br"),s._v(" "),e("code",[s._v("pre-rebase")]),s._v(" 挂钩在衍合前运行，脚本以非零退出可以中止衍合的过程。你可以使用这个挂钩来禁止衍合已经推送的提交对象，"),e("code",[s._v("pre-rebase")]),s._v(" 挂钩样本就是这么做的。该样本假定next是你定义的分支名，因此，你可能要修改样本，把next改成你定义过且稳定的分支名。")]),s._v(" "),e("p",[s._v("比如说，如果你想彻底禁用rebase操作，你可以使用下面的"),e("code",[s._v("pre-rebase")]),s._v("脚本：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('#!/bin/sh\n\n\necho "pre-rebase: Rebasing is dangerous. Don\'t do it."\nexit 1\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("每次运行"),e("code",[s._v("git rebase")]),s._v("，你都会看到下面的信息：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("pre-rebase: Rebasing is dangerous. Don\nThe pre-rebase hook refused to rebase.\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("内置的"),e("code",[s._v("pre-rebase.sample")]),s._v("脚本是一个更复杂的例子。它在何时阻止rebase这方面更加智能。它会检查你当前的分支是否已经合并到了下一个分支中去（也就是主分支）。如果是的话，rebase可能会遇到问题，脚本会放弃这次rebase。")]),s._v(" "),e("p",[e("code",[s._v("post-checkout")]),e("br"),s._v("\n由"),e("code",[s._v("git checkout")]),s._v("命令调用，在完成工作区更新之后执行。该脚本由三个参数：之前HEAD指向的引用，新的HEAD指向的引用，一个用于标识此次检出是否是分支检出的值（0表示文件检出，1表示分支检出）。也可以被"),e("code",[s._v("git clone")]),s._v("触发调用，除非在克隆时使用参数"),e("code",[s._v("--no-checkout")]),s._v("。在由clone调用执行时，三个参数分别为null, 1, 1。这个脚本可以用于为自己的项目设置合适的工作区，比如自动生成文档、移动一些大型二进制文件等，也可以用于检查版本库的有效性。")]),s._v(" "),e("p",[s._v("最后，在 merge 命令成功执行后，"),e("code",[s._v("post-merge")]),s._v(" 挂钩会被调用。他可以用来在 Git 无法跟踪的工作树中恢复数据，诸如权限数据。该挂钩同样能够验证在 Git 控制之外的文件是否存在，因此，当工作树改变时，你想这些文件可以被复制。")]),s._v(" "),e("h3",{attrs:{id:"服务器端-hooks"}},[s._v("服务器端 Hooks")]),s._v(" "),e("p",[s._v("除了客户端挂钩，作为系统管理员，你还可以使用两个服务器端的挂钩对项目实施各种类型的策略。这些挂钩脚本可以在提交对象推送到服务器前被调用，也可以在推送到服务器后被调用。推送到服务器前调用的挂钩可以在任何时候以非零退出，拒绝推送，返回错误消息给客户端，还可以如你所愿设置足够复杂的推送策略。")]),s._v(" "),e("p",[e("strong",[s._v("pre-receive")]),e("br"),s._v("\n处理来自客户端的推送（push）操作时最先执行的脚本就是 "),e("code",[s._v("pre-receive")]),s._v(" 。它从标准输入（stdin）获取被推送引用的列表；如果它退出时的返回值不是0，所有推送内容都不会被接受。利用此挂钩脚本可以实现类似保证最新的索引中不包含非 "),e("code",[s._v("fast-forward")]),s._v(" 类型的这类效果；抑或检查执行推送操作的用户拥有创建，删除或者推送的权限或者他是否对将要修改的每一个文件都有访问权限。")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/usr/bin/env python")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" sys\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" fileinput\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 读取用户试图更新的所有引用")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" line "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" fileinput"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("input")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"pre-receive: Trying to push ref: %s"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" line\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 放弃推送")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sys.exit(1)")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[e("strong",[s._v("post-receive")]),e("br"),s._v(" "),e("code",[s._v("post-receive")]),s._v(" 挂钩在整个过程完结以后运行，可以用来更新其他系统服务或者通知用户。它接受与 "),e("code",[s._v("pre-receive")]),s._v(" 相同的标准输入数据。应用实例包括给某邮件列表发信，通知实时整合数据的服务器，或者更新软件项目的问题追踪系统 —— 甚至可以通过分析提交信息来决定某个问题是否应该被开启，修改或者关闭。该脚本无法组织推送进程，不过客户端在它完成运行之前将保持连接状态；所以在用它作一些消耗时间的操作之前请三思。")]),s._v(" "),e("p",[s._v("** update**"),e("br"),s._v(" "),e("code",[s._v("update")]),s._v(" 脚本和"),e("code",[s._v("pre-receive")]),s._v("脚本十分类似。不同之处在于它会为推送者更新的每一个分支运行一次。假如推送者同时向多个分支推送内容，"),e("code",[s._v("pre-receive")]),s._v(" 只运行一次，相比之下 "),e("code",[s._v("update")]),s._v(" 则会为每一个更新的分支运行一次。它不会从标准输入读取内容，而是接受三个参数：索引的名字（分支），推送前索引指向的内容的 SHA-1 值，以及用户试图推送内容的 SHA-1 值。如果 update 脚本以退出时返回非零值，只有相应的那一个索引会被拒绝；其余的依然会得到更新。")]),s._v(" "),e("h2",{attrs:{id:"husky是什么？"}},[s._v("husky是什么？")]),s._v(" "),e("p",[s._v("husky 是一个 Git Hook 工具。husky 其实就是一个为 git 客户端增加 hook 的工具。将其安装到所在仓库的过程中它会自动在"),e("code",[s._v(".git/")]),s._v("目录下增加相应的钩子实现在"),e("code",[s._v("pre-commit")]),s._v("阶段就执行一系列流程保证每一个 "),e("code",[s._v("commit")]),s._v(" 的正确性。部分 "),e("code",[s._v("cd")]),s._v("在 "),e("code",[s._v("commit stage")]),s._v(" 执行的命令可以挪动到本地执行，比如 lint 检查、比如单元测试。当然，"),e("code",[s._v("pre-commit")]),s._v(" 阶段执行的命令当然要保证其速度不要太慢，每次 "),e("code",[s._v("commit")]),s._v(" 都等很久也不是什么好的体验。")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/typicode/husky#readme",target:"_blank",rel:"noopener noreferrer"}},[s._v("husky Github"),e("OutboundLink")],1)]),s._v(" "),e("h3",{attrs:{id:"husky安装"}},[s._v("husky安装")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("npm install husky \n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"husky"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"hooks"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"pre-commit"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npm test"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"pre-push"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npm test"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"..."')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"..."')]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("git commit -m 'Keep calm and commit'\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("保留现有的挂钩。需要"),e("code",[s._v("Node >= 10")]),s._v("和"),e("code",[s._v("Git >= 2.13.0")]),s._v("。")]),s._v(" "),e("h4",{attrs:{id:"从0-14升级"}},[s._v("从0.14升级")]),s._v(" "),e("p",[s._v("运行"),e("code",[s._v("husky-upgrade")]),s._v("以自动升级您的配置：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("npx --no-install husky-upgrade\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("您也可以手动执行。将现有的钩子移至"),e("code",[s._v("husky.hooks")]),s._v("字段并使用原始Git钩子名称。另外，如果您使用的是"),e("code",[s._v("GIT_PARAMS")]),s._v(" env 变量，请将其重命名为"),e("code",[s._v("HUSKY_GIT_PARAMS")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"scripts"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n-   "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"precommit"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npm test"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n-   "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"commitmsg"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"commitlint -E GIT_PARAMS"')]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n+ "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"husky"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n+   "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"hooks"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n+     "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"pre-commit"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npm test"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n+     "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"commit-msg"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"commitlint -E HUSKY_GIT_PARAMS"')]),s._v("\n+   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n+ "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("p",[s._v("从1.0.0开始，husky 可以使用配置"),e("code",[s._v(".huskyrc")]),s._v("，"),e("code",[s._v(".huskyrc.json")]),s._v("，"),e("code",[s._v(".huskyrc.js")]),s._v("或"),e("code",[s._v("husky.config.js")]),s._v("文件。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('\n{\n  "hooks": {\n    "pre-commit": "npm test"\n  }\n}\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h4",{attrs:{id:"支持的挂钩"}},[s._v("支持的挂钩")]),s._v(" "),e("p",[s._v("Husky支持"),e("a",{attrs:{href:"https://git-scm.com/docs/githooks",target:"_blank",rel:"noopener noreferrer"}},[s._v("此处"),e("OutboundLink")],1),s._v("定义的所有Git钩子。服务器端挂钩（"),e("code",[s._v("pre-receive")]),s._v("，"),e("code",[s._v("update")]),s._v("和"),e("code",[s._v("post-receive")]),s._v("）不被支持。")]),s._v(" "),e("h4",{attrs:{id:"访问git参数和标准输入"}},[s._v("访问Git参数和标准输入")]),s._v(" "),e("p",[s._v("Git挂钩可以通过命令行参数和stdin获取参数。husky 使它们可以通过"),e("code",[s._v("HUSKY_GIT_PARAMS")]),s._v("和"),e("code",[s._v("HUSKY_GIT_STDIN")]),s._v("环境变量来访问。")]),s._v(" "),e("p",[s._v("可以简单测试一下，你就能看到这些参数其实获取到的就是你输入的message信息")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('"commit-msg": "echo $HUSKY_GIT_PARAMS"\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h4",{attrs:{id:"跳过所有挂钩（重新定位）"}},[s._v("跳过所有挂钩（重新定位）")]),s._v(" "),e("p",[s._v("在重新定位期间，您可能希望跳过所有挂钩，可以使用"),e("code",[s._v("HUSKY_SKIP_HOOKS")]),s._v("环境变量。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("HUSKY_SKIP_HOOKS = 1 git rebase ...\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h4",{attrs:{id:"禁用自动安装"}},[s._v("禁用自动安装")]),s._v(" "),e("p",[s._v("如果您不希望husky自动安装Git挂钩，只需设置"),e("code",[s._v("HUSKY_SKIP_INSTALL")]),s._v("环境变量即可。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("HUSKY_SKIP_INSTALL=1 npm install\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h4",{attrs:{id:"ci服务器"}},[s._v("CI服务器")]),s._v(" "),e("p",[s._v("默认情况下，Husky不会安装在CI服务器上。")]),s._v(" "),e("h4",{attrs:{id:"monorepos"}},[s._v("Monorepos")]),s._v(" "),e("p",[s._v("如果您有一个多程序包存储库，建议使用"),e("a",{attrs:{href:"https://github.com/lerna/lerna",target:"_blank",rel:"noopener noreferrer"}},[s._v("lerna之类"),e("OutboundLink")],1),s._v("的工具，并且仅将"),e("a",{attrs:{href:"https://github.com/lerna/lerna",target:"_blank",rel:"noopener noreferrer"}},[s._v("husky"),e("OutboundLink")],1),s._v("安装在根目录中"),e("code",[s._v("package.json")]),s._v("以充当真理的来源。")]),s._v(" "),e("p",[s._v("一般来说，应该避免在多个中定义husky "),e("code",[s._v("package.json")]),s._v("，因为每个软件包都会覆盖以前的husky安装。")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n└── root\n    ├── .git\n    ├── package.json 🐶 "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Add husky here")]),s._v("\n    └── packages\n        ├── A\n        │   └── package.json\n        ├── B\n        │   └── package.json\n        └── C\n            └── package.json\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"private"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"devDependencies"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"husky"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"..."')]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"husky"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"hooks"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"pre-commit"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lerna run test"')]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("h4",{attrs:{id:"节点版本管理器"}},[s._v("节点版本管理器")]),s._v(" "),e("p",[s._v("如果您使用Windows，那么husky只会使用系统上全局安装的版本。")]),s._v(" "),e("p",[s._v("对于macOS和Linux用户：")]),s._v(" "),e("ul",[e("li",[s._v("如果您"),e("code",[s._v("git")]),s._v("在终端中运行命令，那么husky将使用shell中定义的版本"),e("code",[s._v("PATH")]),s._v("。换句话说，如果您是"),e("code",[s._v("nvm")]),s._v("用户，那么husky将使用您设置的版本"),e("code",[s._v("nvm")]),s._v("。")]),s._v(" "),e("li",[s._v("如果您使用的是GUI客户端和"),e("code",[s._v("nvm")]),s._v("，则它可能具有不同的"),e("code",[s._v("PATH")]),s._v("而不是未加载"),e("code",[s._v("nvm")]),s._v("，在这种情况下，通常会选择"),e("code",[s._v("node")]),s._v("安装的最高版本"),e("code",[s._v("nvm")]),s._v("。您还可以检查"),e("code",[s._v("~/.node_path")]),s._v("以查看GUI使用哪个版本，如果要使用其他版本，也可以进行编辑。")])]),s._v(" "),e("h4",{attrs:{id:"本地命令（〜-huskyrc）"}},[s._v("本地命令（〜/.huskyrc）")]),s._v(" "),e("p",[e("code",[s._v("~/.huskyrc")]),s._v("如果在运行钩子脚本之前存在该文件，则Husky将提供源文件。您可以使用它来例如加载节点版本管理器或"),e("code",[s._v("shell")]),s._v("在挂接前运行一些命令。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('\nexport NVM_DIR="$HOME/.nvm"\n[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h4",{attrs:{id:"多个命令"}},[s._v("多个命令")]),s._v(" "),e("p",[s._v("根据设计，就像scripts在中定义的一样package.json，husky将钩子脚本作为单个命令运行。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('"pre-commit": "cmd && cmd"\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("也就是说，如果您更喜欢使用数组，建议的方法是在中定义它们"),e("code",[s._v(".huskyrc.js")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("tasks")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("arr")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" arr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("join")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("' && '")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nmodule"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("exports "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hooks'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'pre-commit'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("tasks")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'cmd'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'cmd'")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[e("a",{attrs:{href:"https://github.com/mysticatea/npm-run-all",target:"_blank",rel:"noopener noreferrer"}},[s._v("npm-run-all"),e("OutboundLink")],1),s._v("之类的工具也可以提供帮助。")]),s._v(" "),e("h4",{attrs:{id:"疑难排解"}},[s._v("疑难排解")]),s._v(" "),e("h5",{attrs:{id:"调试信息"}},[s._v("调试信息")]),s._v(" "),e("p",[e("code",[s._v("HUSKY_DEBUG=1")]),s._v(" 在运行命令时可以提供其他信息。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("HUSKY_DEBUG=1 npm install husky --save-dev\nHUSKY_DEBUG=1 git commit ...\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h5",{attrs:{id:"挂钩没有运行"}},[s._v("挂钩没有运行")]),s._v(" "),e("p",[e("strong",[s._v("检查是否安装了hooks（安装完husky后，在项目中查看"),e("code",[s._v(".git/hooks/")]),s._v("目录下是否存在多个文件，如果是空文件夹，就代表没有安装成功，需要卸载husky，再次重新安装！！！）")]),s._v("。确认"),e("code",[s._v(".git/hooks/pre-commit")]),s._v("存在并且具有hooks代码。它应该以以下内容开头：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("#!/bin/sh\n\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("如果没有，您可能在package.json覆盖沙哑的钩子中定义了另一个Git钩子管理器。在安装过程中还要检查输出，您应该看到：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("husky > Setting up git hooks\nhusky > Done\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h5",{attrs:{id:"提交不被阻止"}},[s._v("提交不被阻止")]),s._v(" "),e("p",[s._v("为了阻止提交，"),e("code",[s._v("pre-commit")]),s._v("脚本必须以非零的退出代码退出。如果您的提交未被阻止，请检查脚本退出代码。")]),s._v(" "),e("h5",{attrs:{id:"提交很慢"}},[s._v("提交很慢")]),s._v(" "),e("p",[s._v("Husky速度很快，而且提交的时间仅增加了十分之几秒（~0.3s在低端PC上）。因此，这很可能与期间完成了多少操作有关"),e("code",[s._v("pre-commit")]),s._v("。您通常可以通过在工具（"),e("code",[s._v("babel")]),s._v("，"),e("code",[s._v("eslint")]),s._v("等）上使用缓存并使用"),e("a",{attrs:{href:"https://github.com/okonet/lint-staged",target:"_blank",rel:"noopener noreferrer"}},[e("code",[s._v("lint-staged")]),e("OutboundLink")],1),s._v("来改善此问题。")]),s._v(" "),e("h5",{attrs:{id:"在新仓库中测试husky"}},[s._v("在新仓库中测试husky")]),s._v(" "),e("p",[s._v("为了找出问题，您还可以创建一个新的仓库：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("mkdir foo && cd foo\ngit init && npm init -y\nnpm install husky --save-dev\n\n\n\n\n\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h5",{attrs:{id:"enoent错误-node-modules-husky-git-hooks"}},[s._v("ENOENT错误'node_modules / husky / .git / hooks'")]),s._v(" "),e("p",[s._v("验证您的Git版本是"),e("code",[s._v(">=2.13.0")]),s._v("。")])])}),[],!1,null,null,null);t.default=n.exports}}]);