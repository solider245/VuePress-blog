(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{445:function(s,t,a){"use strict";a.r(t);var e=a(25),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#为什么需要自动化部署？"}},[s._v("为什么需要自动化部署？")])]),a("li",[a("a",{attrs:{href:"#什么是hook？"}},[s._v("什么是Hook？")])]),a("li",[a("a",{attrs:{href:"#正确的（行为符合预期的）git-hook需要具备的"}},[s._v("正确的（行为符合预期的）Git Hook需要具备的")])]),a("li",[a("a",{attrs:{href:"#如何测试git-hooks"}},[s._v("如何测试Git Hooks")])]),a("li",[a("a",{attrs:{href:"#git-hooks与root命令"}},[s._v("Git Hooks与root命令")])]),a("li",[a("a",{attrs:{href:"#示例：python-web应用利用post-receive进行自动部署"}},[s._v("示例：Python Web应用利用post-receive进行自动部署")])])])]),s._v("\nLinus开发的Git不只是提供了多人合作开发的新方式，还提供了自动化部署的优秀（快糙猛）解决方案。"),a("p"),s._v(" "),a("h2",{attrs:{id:"为什么需要自动化部署？"}},[s._v("为什么需要自动化部署？")]),s._v(" "),a("ul",[a("li",[s._v("当在本地计算机完成服务器应用程序开发之后，需要把程序安装到服务器上，这样的安装过程一般称之为部署。")]),s._v(" "),a("li",[s._v("部署一般分为文件复制、重启服务、安装依赖等（PHP是世界上最好的语言！）。")]),s._v(" "),a("li",[s._v("每次开发完成一个版本都需要部署一次。而部署工作属于多次重复劳动。")]),s._v(" "),a("li",[s._v("身为合格的程序员，应该把一切能够自动化的劳动自动化。")])]),s._v(" "),a("p",[s._v("通过Git Hooks实现的自动化部署，将实现敲入git push命令后，自动完成整个部署过程。")]),s._v(" "),a("h2",{attrs:{id:"什么是hook？"}},[s._v("什么是Hook？")]),s._v(" "),a("p",[s._v("很多人把Hook翻译成「钩子」（计算机行业很多中文译名都难以理解），但根据"),a("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Hooking",target:"_blank",rel:"noopener noreferrer"}},[s._v("维基百科"),a("OutboundLink")],1),s._v("，Hook一般指拦截软件组件或操作系统之间的通信信息，并进行处理的代码。那么对应到Git是怎样的呢？"),a("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//git-scm.com/book/en/v2/Customizing-Git-Git-Hooks",target:"_blank",rel:"noopener noreferrer"}},[s._v("Git Hooks"),a("OutboundLink")],1),s._v("提供了多种形式的Hook，以pre-commit为例，该Hook将拦截git commit操作，运行名叫pre-commit的脚本，且仅当脚本返回值为0时进行真正的commit操作。")]),s._v(" "),a("p",[s._v("那么自动部署所需使用的Hook名为post-receive. 该Hook将在服务器端的bare repository接收到push信息并完成push操作后，进行执行；无法中断客户端（Client）的push过程。")]),s._v(" "),a("p",[s._v("可能浏览完上面的介绍，还是不太明白Hook是什么。简单地说，Hook是一种特殊的脚本（代码），仅在满足特定条件时执行。Git Hooks分别有对应各种操作的Hook，可以在git repository的.git/hooks目录下看到。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\napplypatch-msg.sample     pre-commit.sample         prepare-commit-msg.sample\ncommit-msg.sample         pre-push.sample           update.sample\npost-update.sample        pre-rebase.sample\npre-applypatch.sample     pre-receive.sample\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("以上的脚本文件（可以用编辑器打开）就是Hook了。可以看到脚本文件的后缀名都是sample，也就是说，这些都是Git自带的Hook示例，并不会真正地被执行，真正被执行的Hook是没有后缀的。若要启用pre-push的Hook（在push操作前执行脚本，脚本返回值为0时执行push操作），在hooks目录下新建一个pre-push的文件（没有后缀名）。")]),s._v(" "),a("p",[s._v("在脚本中，你可以写Bash、Python、JavaScript等代码，Git通过"),a("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/Shebang",target:"_blank",rel:"noopener noreferrer"}},[s._v("Shebang"),a("OutboundLink")],1),s._v("来选择执行代码的解释器。如果要写Bash，Shebang可以是这样：")]),s._v(" "),a("p",[s._v("使用Windows的读者请注意，如果脚本文件含有BOM（字节序标识符），可能会导致一些问题。")]),s._v(" "),a("p",[s._v("当完成脚本编写后，别忘了添加“可执行”的权限：")]),s._v(" "),a("p",[s._v("如果之前的步骤都没出问题，那么一个Hook就基本完成了。")]),s._v(" "),a("h2",{attrs:{id:"正确的（行为符合预期的）git-hook需要具备的"}},[s._v("正确的（行为符合预期的）Git Hook需要具备的")]),s._v(" "),a("ul",[a("li",[s._v("正确无误的文件名：pre-receive、commit-msg等")]),s._v(" "),a("li",[s._v("Hook脚本文件具备“可执行”权限")]),s._v(" "),a("li",[s._v("bug free的脚本代码，以及脚本解释器被正确引入、")])]),s._v(" "),a("p",[s._v("最后一项显然要困难得多，那么进入下一话题。")]),s._v(" "),a("h2",{attrs:{id:"如何测试git-hooks"}},[s._v("如何测试Git Hooks")]),s._v(" "),a("p",[s._v("编写Hook并非一蹴而就，其中可能遇到各种各样的问题。那么我们需要一种方式来测试Git Hooks，基本思想是先进行一次Git操作，记录下脚本运行期间的上下文（详细来说就是环境变量，用户输入等，上下文是它们的抽象）。")]),s._v(" "),a("p",[s._v("下面以测试post-receive为例，进行测试环境的搭建。根据资料和实践，post-receive Hook将对每个commit读取三个变量，第一个是上一个commit的ID，第二个是当前commit的ID，最后一个是当前commit的分支。")]),s._v(" "),a("p",[s._v("下面的命令基于Bash，将建立一个remote.git（bare repository）和一个local（repository）目录，Git远程库的命名一般使用.git和其他目录区分，但并非强制。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" init --bare remote.git\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone remote.git "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("local")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("local")]),s._v("      remote.git\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("使用以下代码获取三个变量（注意文件名和执行权限）")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用while循环是有必要的，因为一次push可能含多个commit")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" oldrev newrev refname \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" oldrev: "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$oldrev")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" newrev: "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$newrev")]),s._v("   \n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" refname: "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$refname")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("之后在local中进行git操作，就能看到三个变量。得到三个变量后，就能单独执行post-receive了。实际上是有模拟用户输入的方法的（使用"),a("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//likegeeks.com/expect-command/",target:"_blank",rel:"noopener noreferrer"}},[s._v("expect"),a("OutboundLink")],1),s._v("），但post-receive不需要那么复杂（省得又学一个工具不是美滋滋），直接利用Unix管道即可。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"129aoisdj zkjcnaxj master"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" ./post-receive\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面的命令执行，对于Hook而言，和收到包含一个commit的push等价，免去了假装add commit push的麻烦。")]),s._v(" "),a("h2",{attrs:{id:"git-hooks与root命令"}},[s._v("Git Hooks与root命令")]),s._v(" "),a("p",[s._v("有时在部署中需要用到root权限，例如重启应用；安全的方法是将root命令放在独立的脚本中，然后设置文件权限，允许脚本无密码运行。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 假设脚本为/home/production/restart.sh")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chown")]),s._v(" root:root /home/production/restart.sh\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("700")]),s._v(" /home/production/restart.sh\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("然后执行sudo visudo，在打开的文件中加入以下一行：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("production  "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ALL")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ALL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" NOPASSWD: /home/production/restart.sh\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"示例：python-web应用利用post-receive进行自动部署"}},[s._v("示例：Python Web应用利用post-receive进行自动部署")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("WORKTREE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/home/production/website\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("CONFIG")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("requirements.txt\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" oldrev newrev ref \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$ref")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("~ .*/master$ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 仅允许master分支部署")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Pull to worktree..."')]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#echo "$oldrev $newrev"')]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$WORKTREE")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("unset")]),s._v(" GIT_DIR\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" pull "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&>")]),s._v(" /dev/null\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# install PyPI packages")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" --quiet "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$oldrev")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$newrev")]),s._v(" -- "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$CONFIG")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$WORKTREE")]),s._v("/venv/bin/activate\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"virtualenv activated"')]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v('"')]),s._v(" -eq "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当requirements.txt被修改时，安装依赖")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"requirements.txt changed"')]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("LC_ALL")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("C\n            "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"install packages..."')]),s._v("\n            pip3 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -r requirements.txt\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"requirements.txt does not changed"')]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" /home/production/restart.sh "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重启服务")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"deployment complete"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This is not master branch, and it will not be deployed"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])])])}),[],!1,null,null,null);t.default=n.exports}}]);