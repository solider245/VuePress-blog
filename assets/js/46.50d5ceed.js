(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{518:function(s,n,a){"use strict";a.r(n);var t=a(25),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#原始問題"}},[s._v("原始問題")])]),a("li",[a("a",{attrs:{href:"#最佳答案"}},[s._v("最佳答案")])]),a("li",[a("a",{attrs:{href:"#任意树"}},[s._v("任意树")]),a("ul",[a("li",[a("a",{attrs:{href:"#例"}},[s._v("例")])]),a("li",[a("a",{attrs:{href:"#特征"}},[s._v("特征")])])])]),a("li",[a("a",{attrs:{href:"#实施艰难的道路：从头开始"}},[s._v("实施艰难的道路：从头开始")])]),a("li",[a("a",{attrs:{href:"#如何在python中实现树？"}},[s._v("如何在Python中实现树？")]),a("ul",[a("li",[a("a",{attrs:{href:"#我正在尝试构建通用树。python中是否有任何内置数据结构可以实现它？"}},[s._v("我正在尝试构建通用树。Python中是否有任何内置数据结构可以实现它？")]),a("ul",[a("li",[a("a",{attrs:{href:"#stackoverflow-com"}},[s._v("stackoverflow.com")])])])])])])])]),a("p"),s._v(" "),a("h2",{attrs:{id:"原始問題"}},[s._v("原始問題")]),s._v(" "),a("blockquote",[a("p",[s._v("我正在尝试构建通用树。")])]),s._v(" "),a("blockquote",[a("p",[s._v("Python中是否有任何内置数据结构可以实现它？")])]),s._v(" "),a("h2",{attrs:{id:"最佳答案"}},[s._v("最佳答案")]),s._v(" "),a("h2",{attrs:{id:"任意树"}},[s._v("任意树")]),s._v(" "),a("p",[s._v("我推荐 "),a("a",{attrs:{href:"https://pypi.python.org/pypi/anytree",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://pypi.python.org/pypi/anytree"),a("OutboundLink")],1),s._v(" （我是作者）")]),s._v(" "),a("h3",{attrs:{id:"例"}},[s._v("例")]),s._v(" "),a("div",{staticClass:"language-py line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" anytree "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" RenderTree\n\nudo "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Udo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nmarc "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Marc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" parent"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("udo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nlian "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Lian"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" parent"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("marc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\ndan "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Dan"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" parent"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("udo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\njet "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Jet"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" parent"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("dan"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\njan "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Jan"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" parent"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("dan"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\njoe "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Joe"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" parent"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("dan"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("udo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/Udo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("joe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/Udo/Dan/Joe'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" fill"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" node "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" RenderTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("udo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%s%s"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nUdo\n├── Marc\n│   └── Lian\n└── Dan\n    ├── Jet\n    ├── Jan\n    └── Joe\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("dan"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/Udo/Dan/Jet'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/Udo/Dan/Jan'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/Udo/Dan/Joe'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("h3",{attrs:{id:"特征"}},[s._v("特征")]),s._v(" "),a("p",[a("a",{attrs:{href:"http://anytree.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"}},[s._v("anytree"),a("OutboundLink")],1),s._v(" 还具有强大的API，具有：")]),s._v(" "),a("ul",[a("li",[s._v("简单的树创建")]),s._v(" "),a("li",[s._v("简单的树修改")]),s._v(" "),a("li",[s._v("预序树迭代")]),s._v(" "),a("li",[s._v("后树迭代")]),s._v(" "),a("li",[s._v("解析相对和绝对节点路径")]),s._v(" "),a("li",[s._v("从一个节点到另一个节点。")]),s._v(" "),a("li",[s._v("树渲染（请参见上面的示例）")]),s._v(" "),a("li",[s._v("节点附加/分离联播")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("⏭ If you are still in a hurry and or don't care about implementing your own Python data tree from scratch you can skip the following section.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"实施艰难的道路：从头开始"}},[s._v("实施艰难的道路：从头开始")]),s._v(" "),a("p",[s._v("让我们首先处理递归问题，即我的意思是，一棵树可以通过在根以下的任何级别添加节点来生长，让我们首先生长之前的一棵树，以了解需要的东西：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("**\\# Dictionary (once more this is a forest of 3 trees:)**Families = {  \n            'Peter':  \n                   {'Paul':{'Dog','Toucan'} ,  \n                    'Patty': {'Turtle'}},  \n            'Jim':  \n                   {'Tommy':{'Hamster'},  \n                    'Timmy':{'Hamster'},  \n                    'Tammy':{'Hamster'}},  \n            'Carlos':  \n                   {'Diego':'Cat','Ferret','Fox'}}  \n            }**for Parent, Children in Families.items():**  \n        print(f\"{Parent} has {len(Children)} kid(s):\" )  \n        print(f\" {', and '.join(\\[str(Child) for Child in \\[\\*Children\\]\\])}\")  \n **for Child, pets in Children.items():**  \n            print(f\"  {Child} has {len(pets)} pet(s):\")  \n            print(f\"    {', and '.join(\\[str(pet) for pet in \\[\\*pets\\]\\])}\")**OUTPUT:**Peter has 2 kid(s):  \n Paul, and Patty  \n  Paul has 2 pet(s):  \n    Dog, and Toucan  \n  Patty has 1 pet(s):  \n    Turtle  \nJim has 3 kid(s):  \n Tommy, and Timmy, and Tammy  \n  Tommy has 1 pet(s):  \n    Hamster  \n  Timmy has 1 pet(s):  \n    Hamster  \n  Tammy has 1 pet(s):  \n    Hamster  \nCarlos has 1 kid(s):  \n Diego  \n  Diego has 3 pet(s):  \n    Cat, and Fox, and Ferret\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])]),a("p",[s._v("级别问题的一种解决方案是嵌套更多词典或列表，并添加相同数量的循环以读取所述词典，我们将尽快实现该过程的自动化，但是您可能想知道我们如何在树上进行操作，即我们可以在任何级别添加或删除内容：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  \n**\\- Removing (**Let's say a Hamster pandemic hit Jim's house and Diego's Fox escaped ):**\\# Within a loop:**for Parent, Children in Families.items():  \n    for Child, pets in Children.items():  \n        for pet in pets:  \n **if pet == 'Hamster':**  \n **Families\\[Parent\\]\\[Child\\] = {}****\\# Directly Updating:****Families\\['Carlos'\\]\\['Diego'\\]**  =  {'Cat','Ferret'}**\\- Addition can work in the same way:** Families\\[Parent\\]\\[Child\\] = {'Snake'}  \nFamilies\\['Carlos'\\]\\['Diego'\\]  =  {'Cat','Ferret', 'Fox'}You could also use any other Dictionary or iterable method to suit your needs, if for instance you wanted to delete whole branch or family tree:del Families\\['Peter'\\] \\['Paul’\\]  \n_#or_  \ndel Families\\['Peter’\\]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("现在开始将所有内容移入类以供重用：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\"\"\"Barebones minimal general Tree & Node, using lists, but can also use dictionaries if you need key value pairs\"\"\"**class Tree():**  \n    def \\_\\_init\\_\\_(self,root):  \n        self.root = root  \n        self.children = \\[\\]  \n    def addNode(self,obj):  \n        self.children.append(obj)**class Node():**  \n    def \\_\\_init\\_\\_(self, data):  \n        self.data = data  \n        self.children = \\[\\]  \n    def addNode(self,obj):  \n        self.children.append(obj)**USAGE:**FunCorp =  Tree('Head Honcho') **\\# Create a tree and add root data.**  \nprint(FunCorp.root) **\\# ask the Tree for it's root.**\\>> Head Honcho**\\# Add children to root:**FunCorp.addNode(Node('VP of Stuff'))  \nFunCorp.addNode(Node('VP of Shenanigans'))  \nFunCorp.addNode(Node('VP of Hootenanny'))**\\# Get children of root:**print(f'C suite: {\", \".join(str(child.data) for child in FunCorp.children)}')\\>> C suite: VP of Stuff, VP of Shenanigans, VP of Hootenanny\\# **Add Node to the first child of the Tree:**FunCorp.children\\[0\\].addNode(Node('General manager of Fun'))**\\# Get the first child of the first child of the Tree:**print(f'The position under {FunCorp.children\\[0\\].data} is: {FunCorp.children\\[0\\].children\\[0\\].data}')\\>> The position under VP of Stuff is: General manager of Fun\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("这是一个最小的实现，您需要向树或节点类添加方法以使其更加用户友好或实现特定功能，可以用作其他功能模板的此类功能之一是向树询问所有它是节点：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\"\"\"Barebones general Tree & Node\"\"\"  \nclass Tree():  \n    def \\_\\_init\\_\\_(self,root):  \n        self.root = root  \n        self.children = \\[\\]  \n **self.Nodes = \\[\\]**  \n    def addNode(self,obj):  \n        self.children.append(obj) **def getAllNodes(self):  \n        self.Nodes.append(self.root)  \n        for child in self.children:  \n            self.Nodes.append(child.data)  \n        for child in self.children:  \n            if child.getChildNodes(self.Nodes) != None:  \n                child.getChildNodes(self.Nodes)  \n        print(\\*self.Nodes, sep = \"\\\\n\")  \n        print('Tree Size:' + str(len(self.Nodes)))**class Node():  \n    def \\_\\_init\\_\\_(self, data):  \n        self.data = data  \n        self.children = \\[\\]  \n    def addNode(self,obj):  \n        self.children.append(obj)  \n **def getChildNodes(self,Tree):  \n        for child in self.children:  \n            if child.children:  \n                child.getChildNodes(Tree)  \n                Tree.append(child.data)  \n            else:  \n                Tree.append(child.data)**\\# Add a bunch of nodesFunCorp =  Tree('Head Honcho')  \nFunCorp.addNode(Node('VP of Stuff'))  \nFunCorp.addNode(Node('VP of Shenanigans'))  \nFunCorp.addNode(Node('VP of Hootenanny'))  \nFunCorp.children\\[0\\].addNode(Node('General manager of Fun'))  \nFunCorp.children\\[1\\].addNode(Node('General manager Shindings'))  \nFunCorp.children\\[0\\].children\\[0\\].addNode(Node('Sub manager of Fun'))  \nFunCorp.children\\[0\\].children\\[0\\].children\\[0\\].addNode(Node('Employee of the month'))\\# Get all nodes (unordered):  \n**FunCorp.getAllNodes()**\\>>  \nHead Honcho  \nVP of Stuff  \nVP of Shenanigans  \nVP of Hootenanny  \nEmployee of the month  \nSub manager of Fun  \nGeneral manager of Fun  \nGeneral manager Shindings  \nTree Size:8\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br")])]),a("p",[s._v("当然，您可以添加或微调更多方法（"),a("em",[s._v("例如")]),s._v("，"),a("em",[s._v("对键值对进行排序和添加")]),s._v("）以及从头开始实现树的方法（"),a("em",[s._v("请参阅此以获取更多想法")]),s._v("）：")]),s._v(" "),a("p",[s._v("[")]),s._v(" "),a("h2",{attrs:{id:"如何在python中实现树？"}},[s._v("如何在Python中实现树？")]),s._v(" "),a("h3",{attrs:{id:"我正在尝试构建通用树。python中是否有任何内置数据结构可以实现它？"}},[s._v("我正在尝试构建通用树。Python中是否有任何内置数据结构可以实现它？")]),s._v(" "),a("h4",{attrs:{id:"stackoverflow-com"}},[s._v("stackoverflow.com")]),s._v(" "),a("p",[s._v("](https://stackoverflow.com/questions/2358045/how-can-i-implement-a-tree-in-python)")])])}),[],!1,null,null,null);n.default=e.exports}}]);