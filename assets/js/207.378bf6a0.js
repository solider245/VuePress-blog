(window.webpackJsonp=window.webpackJsonp||[]).push([[207],{368:function(s,n,a){"use strict";a.r(n);var e=a(25),r=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#linux中的符号基本都在这里了"}},[s._v("linux中的符号基本都在这里了")])])])]),a("p"),s._v(" "),a("h2",{attrs:{id:"linux中的符号基本都在这里了"}},[s._v("linux中的符号基本都在这里了")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('## **# 井号 (comments)**  \n这几乎是个满场都有的符号，除了先前已经提过的"第一行"  \n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("blockquote",[a("p",[s._v("#!/bin/bash")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("井号也常出现在一行的开头，或者位于完整指令之后，这类情况表示符号后面的是注解文字，不会被执行。  \n\\# This line is comments.  \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("blockquote",[a("p",[s._v('echo "a = $a" # a = 0')])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('由于这个特性，当临时不想执行某行指令时，只需在该行开头加上 # 就行了。这常用在撰写过程中。  \n#echo "a = $a" # a = 0  \n如果被用在指令中，或者引号双引号括住的话，或者在倒斜线的后面，那他就变成一般符号，不具上述的特殊功能。  \n  \n  \n**~** **帐户的 home 目录**  \n算是个常见的符号，代表使用者的 home 目录：cd ~；也可以直接在符号后加上某帐户的名称：cd ~user或者当成是路径的一部份：~/bin  \n~+ 当前的工作目录，这个符号代表当前的工作目录，她和内建指令 pwd的作用是相同的。  \n\\# echo ~+/var/log  \n~- 上次的工作目录，这个符号代表上次的工作目录。  \n\\# echo ~-/etc/httpd/logs  \n  \n  \n**;** **分号 (Command separator)**  \n在 shell 中，担任"连续指令"功能的符号就是"分号"。譬如以下的例子：cd ~/backup ; mkdir startup ;cp ~/.\\* startup/.  \n  \n  \n**;;** **连续分号 (Terminator)**  \n专用在 case 的选项，担任 Terminator 的角色。  \ncase "$fop" inhelp) echo "Usage: Command -help -version filename";;version) echo "version 0.1" ;;esac  \n  \n  \n**.** **逗号 (dot,就是“点”)**  \n在 shell 中，使用者应该都清楚，一个 dot 代表当前目录，两个 dot 代表上层目录。  \nCDPATH=.:~:/home:/home/web:/var:/usr/local  \n在上行 CDPATH 的设定中，等号后的 dot 代表的就是当前目录的意思。  \n如果档案名称以 dot 开头，该档案就属特殊档案，用 ls 指令必须加上 -a 选项才会显示。除此之外，在 regularexpression 中，一个 dot 代表匹配一个字元。  \n  \n  \n**\'string\'** **单引号 (single quote)**  \n被单引号用括住的内容，将被视为单一字串。在引号内的代表变数的$符号，没有作用，也就是说，他被视为一般符号处理，防止任何变量替换。  \nheyyou=homeecho \'$heyyou\' # We get $heyyou  \n  \n  \n**"string"** **双引号 (double quote)**  \n被双引号用括住的内容，将被视为单一字串。它防止通配符扩展，但允许变量扩展。这点与单引数的处理方式不同。  \nheyyou=homeecho "$heyyou" # We get home  \n  \n**\\`command\\`** **倒引号 (backticks)**  \n在前面的单双引号，括住的是字串，但如果该字串是一列命令列，会怎样？答案是不会执行。要处理这种情况，我们得用倒单引号来做。  \nfdv=\\`date +%F\\`echo "Today $fdv"  \n在倒引号内的 date +%F 会被视为指令，执行的结果会带入 fdv 变数中。  \n  \n  \n**,** **逗点 (comma，标点中的逗号)**  \n这个符号常运用在运算当中当做"区隔"用途。如下例  \n#!/bin/bashlet "t1 = ((a = 5 + 3, b = 7 - 1, c = 15 / 3))"echo "t1= $t1, a = $a, b = $b"  \n  \n  \n**/** **斜线 (forward slash)**  \n在路径表示时，代表目录。  \ncd /etc/rc.dcd ../..cd /  \n通常单一的 / 代表 root 根目录的意思；在四则运算中，代表除法的符号。  \nlet "num1 = ((a = 10 / 2, b = 25 / 5))"  \n  \n  \n**\\\\** **倒斜线**  \n在交互模式下的escape 字元，有几个作用；放在指令前，有取消 aliases的作用；放在特殊符号前，则该特殊符号的作用消失；放在指令的最末端，表示指令连接下一行。  \n\\# type rmrm is aliased to \\`rm -i\'# \\\\rm ./\\*.log  \n上例，我在 rm 指令前加上 escape 字元，作用是暂时取消别名的功能，将 rm 指令还原。  \n\\# bkdir=/home# echo "Backup dir, \\\\$bkdir = $bkdir"Backup dir,$bkdir = /home  \n上例 echo 内的 \\\\$bkdir，escape 将 $ 变数的功能取消了，因此，会输出 $bkdir，而第二个 $bkdir则会输出变数的内容 /home。  \n  \n  \n**|** **管道 (pipeline)**  \npipeline 是 UNIX 系统，基础且重要的观念。连结上个指令的标准输出，做为下个指令的标准输入。  \nwho | wc -l  \n善用这个观念，对精简 script 有相当的帮助。  \n  \n  \n**!** **惊叹号(negate or reverse)**  \n通常它代表反逻辑的作用，譬如条件侦测中，用 != 来代表"不等于"  \nif \\[ "$?" != 0 \\]thenecho "Executes error"exit 1fi  \n在规则表达式中她担任 "反逻辑" 的角色  \nls a\\[!0-9\\]  \n上例，代表显示除了a0, a1 .... a9 这几个文件的其他文件。  \n  \n  \n**:** **冒号**  \n在 bash 中，这是一个内建指令："什么事都不干"，但返回状态值 0。  \n:  \necho $? # 回应为 0  \n: > f.$$  \n上面这一行，相当于 cat /dev/null >f.$$。不仅写法简短了，而且执行效率也好上许多。  \n有时，也会出现以下这类的用法  \n: ${HOSTNAME?} ${USER?} ${MAIL?}  \n这行的作用是，检查这些环境变数是否已设置，没有设置的将会以标准错误显示错误讯息。像这种检查如果使用类似 test 或 if这类的做法，基本上也可以处理，但都比不上上例的简洁与效率。  \n除了上述之外，还有一个地方必须使用冒号  \nPATH=$PATH:$HOME/fbin:$HOME/fperl:/usr/local/mozilla  \n在使用者自己的HOME 目录下的 .bash\\_profile或任何功能相似的档案中，设定关于"路径"的场合中，我们都使用冒号，来做区隔。  \n  \n  \n**?** **问号 (wild card)**  \n在文件名扩展(Filename expansion)上扮演的角色是匹配一个任意的字元，但不包含 null 字元。  \n\\# ls a?a1  \n善用她的特点，可以做比较精确的档名匹配。  \n  \n  \n**\\*** **星号 (wild card)**  \n相当常用的符号。在文件名扩展(Filename expansion)上，她用来代表任何字元，包含 null 字元。  \n\\# ls a\\*a a1 access\\_log  \n在运算时，它则代表 "乘法"。  \nlet "fmult=2\\*3"  \n除了内建指令 let，还有一个关于运算的指令expr，星号在这里也担任"乘法"的角色。不过在使用上得小心，他的前面必须加上escape 字元。  \n  \n  \n**\\*\\*** **次方运算**  \n两个星号在运算时代表 "次方" 的意思。  \nlet "sus=2\\*\\*3"echo "sus = $sus" # sus = 8  \n  \n  \n**$** **钱号(dollar sign)**  \n_变量替换_(Variable Substitution)的代表符号。  \nvrs=123echo "vrs = $vrs" # vrs = 123  \n另外，在 Regular Expressions 里被定义为 "行" 的最末端 (end-of-line)。这个常用在grep、sed、awk 以及 vim(vi) 当中。  \n  \n  \n_${}_ _变量的正规表达式_  \nbash 对 ${} 定义了不少用法。以下是取自线上说明的表列  \n   ${parameter:-word}   ${parameter:=word}   ${parameter:?word}   ${parameter:+word}   ${parameter:offset}   ${parameter:offset:length}   ${!prefix\\*}   ${#parameter}   ${parameter#word}   ${parameter##word}   ${parameter%word}   ${parameter%%word}   ${parameter/pattern/string}   ${parameter//pattern/string}  \n  \n  \n_$\\*  \n$\\*_ 引用script的执行引用变量，引用参数的算法与一般指令相同，指令本身为0，其后为1，然后依此类推。引用变量的代表方式如下：  \n$0, $1, $2, $3, $4, $5, $6, $7, $8, $9, ${10}, ${11}.....  \n个位数的，可直接使用数字，但两位数以上，则必须使用 {} 符号来括住。  \n$\\* 则是代表所有引用变量的符号。使用时，得视情况加上双引号。  \necho "$\\*"  \n还有一个与 $\\* 具有相同作用的符号，但效用与处理方式略为不同的符号。  \n  \n  \n_$@_  \n$@ 与 $\\* 具有相同作用的符号，不过她们两者有一个不同点。  \n符号 $\\* 将所有的引用变量视为一个整体。但符号 $@ 则仍旧保留每个引用变量的区段观念。  \n  \n_$#_  \n这也是与引用变量相关的符号，她的作用是告诉你，引用变量的总数量是多少。  \necho "$#"  \n  \n  \n_$?_ _状态值_ (status variable)  \n一般来说，UNIX(linux) 系统的进程以执行系统调用exit()来结束的。这个回传值就是status值。回传给父进程，用来检查子进程的执行状态。  \n一般指令程序倘若执行成功，其回传值为 0；失败为 1。  \ntar cvfz dfbackup.tar.gz /home/user > /dev/nullecho"$?"$$  \n由于进程的ID是唯一的，所以在同一个时间，不可能有重复性的 PID。有时，script会需要产生临时文件，用来存放必要的资料。而此script亦有可能在同一时间被使用者们使用。在这种情况下，固定文件名在写法上就显的不可靠。唯有产生动态文件名，才能符合需要。符号$$或许可以符合这种需求。它代表当前shell 的 PID。  \necho "$HOSTNAME, $USER, $MAIL" > ftmp.$$  \n使用它来作为文件名的一部份，可以避免在同一时间，产生相同文件名的覆盖现象。  \nps: 基本上，系统会回收执行完毕的 PID，然后再次依需要分配使用。所以 script 即使临时文件是使用动态档名的写法，如果script 执行完毕后仍不加以清除，会产生其他问题。  \n  \n**(   )** **指令群组 (command group)**  \n用括号将一串连续指令括起来，这种用法对 shell 来说，称为指令群组。如下面的例子：(cd ~ ; vcgh=\\`pwd\\` ;echo $vcgh)，指令群组有一个特性，shell会以产生 subshell来执行这组指令。因此，在其中所定义的变数，仅作用于指令群组本身。我们来看个例子  \n\\# cat ftmp-01#!/bin/basha=fsh(a=incg ; echo -e "\\\\n $a \\\\n")echo $a#./ftmp-01incgfsh  \n除了上述的指令群组，括号也用在 array 变数的定义上；另外也应用在其他可能需要加上escape字元才能使用的场合，如运算式。  \n  \n  \n**((  ))**  \n这组符号的作用与 let 指令相似，用在算数运算上，是 bash 的内建功能。所以，在执行效率上会比使用 let指令要好许多。  \n#!/bin/bash(( a = 10 ))echo -e "inital value, a = $a\\\\n"(( a++))echo "after a++, a = $a"  \n  \n**{  }** **大括号 (Block of code)**  \n有时候 script 当中会出现，大括号中会夹着一段或几段以"分号"做结尾的指令或变数设定。  \n\\# cat ftmp-02#!/bin/basha=fsh{a=inbc ; echo -e "\\\\n $a \\\\n"}echo $a#./ftmp-02inbcinbc  \n这种用法与上面介绍的指令群组非常相似，但有个不同点，它在当前的 shell 执行，不会产生 subshell。  \n大括号也被运用在 "函数" 的功能上。广义地说，单纯只使用大括号时，作用就像是个没有指定名称的函数一般。因此，这样写 script也是相当好的一件事。尤其对输出输入的重导向上，这个做法可精简 script 的复杂度。  \n  \n此外，大括号还有另一种用法，如下  \n{xx,yy,zz,...}  \n这种大括号的组合，常用在字串的组合上，来看个例子  \nmkdir {userA,userB,userC}-{home,bin,data}  \n我们得到 userA-home, userA-bin, userA-data, userB-home, userB-bin,userB-data, userC-home, userC-bin,userC-data，这几个目录。这组符号在适用性上相当广泛。能加以善用的话，回报是精简与效率。像下面的例子  \nchown root /usr/{ucb/{ex,edit},lib/{ex?.?\\*,how\\_ex}}  \n如果不是因为支援这种用法，我们得写几行重复几次呀！  \n  \n  \n**\\[   \\]** **中括号**  \n常出现在流程控制中，扮演括住判断式的作用。if \\[ "$?" != 0 \\]thenecho "Executes error"exit1fi  \n这个符号在正则表达式中担任类似 "范围" 或 "集合" 的角色  \nrm -r 200\\[1234\\]  \n上例，代表删除 2001, 2002, 2003, 2004 等目录的意思。  \n  \n  \n**\\[\\[     \\]\\]**  \n这组符号与先前的 \\[\\] 符号，基本上作用相同，但她允许在其中直接使用 || 与&& 逻辑等符号。  \n#!/bin/bashread akif \\[\\[ $ak > 5 || $ak< 9 \\]\\]thenecho $akfi  \n  \n  \n**||** **逻辑符号**  \n这个会时常看到，代表 or 逻辑的符号。  \n  \n  \n**&&** **逻辑符号**  \n这个也会常看到，代表 and 逻辑的符号。  \n  \n  \n**&** **后台工作**  \n单一个& 符号，且放在完整指令列的最后端，即表示将该指令列放入后台中工作。  \ntar cvfz data.tar.gz data > /dev/null&  \n  \n**\\\\<...\\\\>** **单字边界**  \n这组符号在规则表达式中，被定义为"边界"的意思。譬如，当我们想找寻 the 这个单字时，如果我们用  \ngrep the FileA  \n你将会发现，像 there 这类的单字，也会被当成是匹配的单字。因为 the 正巧是 there的一部份。如果我们要必免这种情况，就得加上 "边界" 的符号  \ngrep \'\\\\\' FileA  \n  \n  \n**\\+** **加号 (plus)**  \n在运算式中，她用来表示 "加法"。  \nexpr 1 + 2 + 3  \n此外在规则表达式中，用来表示"很多个"的前面字元的意思。  \n\\# grep \'10\\\\+9\' fileB109100910000910000931010009#这个符号在使用时，前面必须加上escape 字元。  \n  \n  \n**\\-** **减号 (dash)**  \n在运算式中，她用来表示 "减法"。  \nexpr 10 - 2  \n此外也是系统指令的选项符号。  \nls -expr 10 - 2  \n在 GNU 指令中，如果单独使用 - 符号，不加任何该加的文件名称时，代表"标准输入"的意思。这是 GNU指令的共通选项。譬如下例  \ntar xpvf -  \n这里的 - 符号，既代表从标准输入读取资料。  \n不过，在 cd 指令中则比较特别  \ncd -  \n这代表变更工作目录到"上一次"工作目录。  \n  \n  \n**%** **除法 (Modulo)**  \n在运算式中，用来表示 "除法"。  \nexpr 10 % 2  \n此外，也被运用在关于变量的规则表达式当中的下列  \n${parameter%word}${parameter%%word}  \n一个 % 表示最短的 word 匹配，两个表示最长的 word 匹配。  \n  \n  \n**\\=** **等号 (Equals)**  \n常在设定变数时看到的符号。  \nvara=123echo " vara = $vara"  \n或者像是 PATH 的设定，甚至应用在运算或判断式等此类用途上。  \n  \n  \n**\\==** **等号 (Equals)**  \n常在条件判断式中看到，代表 "等于" 的意思。  \nif \\[ $vara == $varb \\]  \n...下略  \n  \n**!=** **不等于**  \n常在条件判断式中看到，代表 "不等于" 的意思。  \nif \\[ $vara != $varb \\]  \n...下略  \n  \n  \n**^**  \n这个符号在规则表达式中，代表行的 "开头" 位置，在\\[\\]中也与"!"(叹号)一样表示“非”  \n  \n  \n**输出/输入重导向**  \n\\>      >>   <   <<   :>   &>   2&>   2<>>&   >&2     \n  \n文件描述符(File Descriptor)，用一个数字（通常为0-9）来表示一个文件。  \n常用的文件描述符如下：  \n**文件描述符          名称         常用缩写     默认值**  \n     0               标准输入      stdin            键盘  \n     1               标准输出      stdout         屏幕  \n     2            标准错误输出   stderr          屏幕  \n我们在简单地用<或>时，相当于使用 0< 或 1>（下面会详细介绍）。  \n**\\* cmd > file**  \n把cmd命令的输出重定向到文件file中。如果file已经存在，则清空原有文件，使用bash的noclobber选项可以防止复盖原有文件。  \n**\\* cmd >> file**  \n把cmd命令的输出重定向到文件file中，如果file已经存在，则把信息加在原有文件後面。  \n**\\* cmd < file**  \n使cmd命令从file读入  \n**\\* cmd << text**  \n从命令行读取输入，直到一个与text相同的行结束。除非使用引号把输入括起来，此模式将对输入内容进行shell变量替换。如果使用<<- ，则会忽略接下来输入行首的tab，结束行也可以是一堆tab再加上一个与text相同的内容，可以参考後面的例子。  \n**\\* cmd <<< word**  \n把word（而不是文件word）和後面的换行作为输入提供给cmd。  \n**\\* cmd <> file**  \n以读写模式把文件file重定向到输入，文件file不会被破坏。仅当应用程序利用了这一特性时，它才是有意义的。  \n**\\* cmd >| file**  \n功能同>，但即便在设置了noclobber时也会复盖file文件，注意用的是|而非一些书中说的!，目前仅在csh中仍沿用>!实现这一功能。  \n**: > filename**     把文件"filename"截断为0长度.# 如果文件不存在, 那么就创建一个0长度的文件(与\'touch\'的效果相同).  \n**cmd >&n** 把输出送到文件描述符n  \n**cmd m>&n** 把输出 到文件符m的信息重定向到文件描述符n  \n**cmd >&-** 关闭标准输出  \n**cmd <&n** 输入来自文件描述符n  \n**cmd m<&n** m来自文件描述各个n  \n**cmd <&-** 关闭标准输入  \n**cmd <&n-** 移动输入文件描述符n而非复制它。（需要解释）  \n**cmd >&n-** 移动输出文件描述符 n而非复制它。（需要解释）  \n注意： >&实际上复制了文件描述符，这使得cmd > file 2>&1与cmd 2>&1 >file的效果不一样。')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br"),a("span",{staticClass:"line-number"},[s._v("115")]),a("br"),a("span",{staticClass:"line-number"},[s._v("116")]),a("br"),a("span",{staticClass:"line-number"},[s._v("117")]),a("br"),a("span",{staticClass:"line-number"},[s._v("118")]),a("br"),a("span",{staticClass:"line-number"},[s._v("119")]),a("br"),a("span",{staticClass:"line-number"},[s._v("120")]),a("br"),a("span",{staticClass:"line-number"},[s._v("121")]),a("br"),a("span",{staticClass:"line-number"},[s._v("122")]),a("br"),a("span",{staticClass:"line-number"},[s._v("123")]),a("br"),a("span",{staticClass:"line-number"},[s._v("124")]),a("br"),a("span",{staticClass:"line-number"},[s._v("125")]),a("br"),a("span",{staticClass:"line-number"},[s._v("126")]),a("br"),a("span",{staticClass:"line-number"},[s._v("127")]),a("br"),a("span",{staticClass:"line-number"},[s._v("128")]),a("br"),a("span",{staticClass:"line-number"},[s._v("129")]),a("br"),a("span",{staticClass:"line-number"},[s._v("130")]),a("br"),a("span",{staticClass:"line-number"},[s._v("131")]),a("br"),a("span",{staticClass:"line-number"},[s._v("132")]),a("br"),a("span",{staticClass:"line-number"},[s._v("133")]),a("br"),a("span",{staticClass:"line-number"},[s._v("134")]),a("br"),a("span",{staticClass:"line-number"},[s._v("135")]),a("br"),a("span",{staticClass:"line-number"},[s._v("136")]),a("br"),a("span",{staticClass:"line-number"},[s._v("137")]),a("br"),a("span",{staticClass:"line-number"},[s._v("138")]),a("br"),a("span",{staticClass:"line-number"},[s._v("139")]),a("br"),a("span",{staticClass:"line-number"},[s._v("140")]),a("br"),a("span",{staticClass:"line-number"},[s._v("141")]),a("br"),a("span",{staticClass:"line-number"},[s._v("142")]),a("br"),a("span",{staticClass:"line-number"},[s._v("143")]),a("br"),a("span",{staticClass:"line-number"},[s._v("144")]),a("br"),a("span",{staticClass:"line-number"},[s._v("145")]),a("br"),a("span",{staticClass:"line-number"},[s._v("146")]),a("br"),a("span",{staticClass:"line-number"},[s._v("147")]),a("br"),a("span",{staticClass:"line-number"},[s._v("148")]),a("br"),a("span",{staticClass:"line-number"},[s._v("149")]),a("br"),a("span",{staticClass:"line-number"},[s._v("150")]),a("br"),a("span",{staticClass:"line-number"},[s._v("151")]),a("br"),a("span",{staticClass:"line-number"},[s._v("152")]),a("br"),a("span",{staticClass:"line-number"},[s._v("153")]),a("br"),a("span",{staticClass:"line-number"},[s._v("154")]),a("br"),a("span",{staticClass:"line-number"},[s._v("155")]),a("br"),a("span",{staticClass:"line-number"},[s._v("156")]),a("br"),a("span",{staticClass:"line-number"},[s._v("157")]),a("br"),a("span",{staticClass:"line-number"},[s._v("158")]),a("br"),a("span",{staticClass:"line-number"},[s._v("159")]),a("br"),a("span",{staticClass:"line-number"},[s._v("160")]),a("br"),a("span",{staticClass:"line-number"},[s._v("161")]),a("br"),a("span",{staticClass:"line-number"},[s._v("162")]),a("br"),a("span",{staticClass:"line-number"},[s._v("163")]),a("br"),a("span",{staticClass:"line-number"},[s._v("164")]),a("br"),a("span",{staticClass:"line-number"},[s._v("165")]),a("br"),a("span",{staticClass:"line-number"},[s._v("166")]),a("br"),a("span",{staticClass:"line-number"},[s._v("167")]),a("br"),a("span",{staticClass:"line-number"},[s._v("168")]),a("br"),a("span",{staticClass:"line-number"},[s._v("169")]),a("br"),a("span",{staticClass:"line-number"},[s._v("170")]),a("br"),a("span",{staticClass:"line-number"},[s._v("171")]),a("br"),a("span",{staticClass:"line-number"},[s._v("172")]),a("br"),a("span",{staticClass:"line-number"},[s._v("173")]),a("br"),a("span",{staticClass:"line-number"},[s._v("174")]),a("br"),a("span",{staticClass:"line-number"},[s._v("175")]),a("br"),a("span",{staticClass:"line-number"},[s._v("176")]),a("br"),a("span",{staticClass:"line-number"},[s._v("177")]),a("br"),a("span",{staticClass:"line-number"},[s._v("178")]),a("br"),a("span",{staticClass:"line-number"},[s._v("179")]),a("br"),a("span",{staticClass:"line-number"},[s._v("180")]),a("br"),a("span",{staticClass:"line-number"},[s._v("181")]),a("br"),a("span",{staticClass:"line-number"},[s._v("182")]),a("br"),a("span",{staticClass:"line-number"},[s._v("183")]),a("br"),a("span",{staticClass:"line-number"},[s._v("184")]),a("br"),a("span",{staticClass:"line-number"},[s._v("185")]),a("br"),a("span",{staticClass:"line-number"},[s._v("186")]),a("br"),a("span",{staticClass:"line-number"},[s._v("187")]),a("br"),a("span",{staticClass:"line-number"},[s._v("188")]),a("br"),a("span",{staticClass:"line-number"},[s._v("189")]),a("br"),a("span",{staticClass:"line-number"},[s._v("190")]),a("br"),a("span",{staticClass:"line-number"},[s._v("191")]),a("br"),a("span",{staticClass:"line-number"},[s._v("192")]),a("br"),a("span",{staticClass:"line-number"},[s._v("193")]),a("br"),a("span",{staticClass:"line-number"},[s._v("194")]),a("br"),a("span",{staticClass:"line-number"},[s._v("195")]),a("br"),a("span",{staticClass:"line-number"},[s._v("196")]),a("br"),a("span",{staticClass:"line-number"},[s._v("197")]),a("br"),a("span",{staticClass:"line-number"},[s._v("198")]),a("br"),a("span",{staticClass:"line-number"},[s._v("199")]),a("br"),a("span",{staticClass:"line-number"},[s._v("200")]),a("br"),a("span",{staticClass:"line-number"},[s._v("201")]),a("br"),a("span",{staticClass:"line-number"},[s._v("202")]),a("br"),a("span",{staticClass:"line-number"},[s._v("203")]),a("br"),a("span",{staticClass:"line-number"},[s._v("204")]),a("br"),a("span",{staticClass:"line-number"},[s._v("205")]),a("br"),a("span",{staticClass:"line-number"},[s._v("206")]),a("br"),a("span",{staticClass:"line-number"},[s._v("207")]),a("br"),a("span",{staticClass:"line-number"},[s._v("208")]),a("br"),a("span",{staticClass:"line-number"},[s._v("209")]),a("br"),a("span",{staticClass:"line-number"},[s._v("210")]),a("br"),a("span",{staticClass:"line-number"},[s._v("211")]),a("br"),a("span",{staticClass:"line-number"},[s._v("212")]),a("br"),a("span",{staticClass:"line-number"},[s._v("213")]),a("br"),a("span",{staticClass:"line-number"},[s._v("214")]),a("br"),a("span",{staticClass:"line-number"},[s._v("215")]),a("br"),a("span",{staticClass:"line-number"},[s._v("216")]),a("br"),a("span",{staticClass:"line-number"},[s._v("217")]),a("br"),a("span",{staticClass:"line-number"},[s._v("218")]),a("br"),a("span",{staticClass:"line-number"},[s._v("219")]),a("br"),a("span",{staticClass:"line-number"},[s._v("220")]),a("br"),a("span",{staticClass:"line-number"},[s._v("221")]),a("br"),a("span",{staticClass:"line-number"},[s._v("222")]),a("br"),a("span",{staticClass:"line-number"},[s._v("223")]),a("br"),a("span",{staticClass:"line-number"},[s._v("224")]),a("br"),a("span",{staticClass:"line-number"},[s._v("225")]),a("br"),a("span",{staticClass:"line-number"},[s._v("226")]),a("br"),a("span",{staticClass:"line-number"},[s._v("227")]),a("br"),a("span",{staticClass:"line-number"},[s._v("228")]),a("br"),a("span",{staticClass:"line-number"},[s._v("229")]),a("br"),a("span",{staticClass:"line-number"},[s._v("230")]),a("br"),a("span",{staticClass:"line-number"},[s._v("231")]),a("br"),a("span",{staticClass:"line-number"},[s._v("232")]),a("br"),a("span",{staticClass:"line-number"},[s._v("233")]),a("br"),a("span",{staticClass:"line-number"},[s._v("234")]),a("br"),a("span",{staticClass:"line-number"},[s._v("235")]),a("br"),a("span",{staticClass:"line-number"},[s._v("236")]),a("br"),a("span",{staticClass:"line-number"},[s._v("237")]),a("br"),a("span",{staticClass:"line-number"},[s._v("238")]),a("br"),a("span",{staticClass:"line-number"},[s._v("239")]),a("br"),a("span",{staticClass:"line-number"},[s._v("240")]),a("br"),a("span",{staticClass:"line-number"},[s._v("241")]),a("br"),a("span",{staticClass:"line-number"},[s._v("242")]),a("br"),a("span",{staticClass:"line-number"},[s._v("243")]),a("br"),a("span",{staticClass:"line-number"},[s._v("244")]),a("br"),a("span",{staticClass:"line-number"},[s._v("245")]),a("br"),a("span",{staticClass:"line-number"},[s._v("246")]),a("br"),a("span",{staticClass:"line-number"},[s._v("247")]),a("br"),a("span",{staticClass:"line-number"},[s._v("248")]),a("br"),a("span",{staticClass:"line-number"},[s._v("249")]),a("br"),a("span",{staticClass:"line-number"},[s._v("250")]),a("br"),a("span",{staticClass:"line-number"},[s._v("251")]),a("br"),a("span",{staticClass:"line-number"},[s._v("252")]),a("br"),a("span",{staticClass:"line-number"},[s._v("253")]),a("br"),a("span",{staticClass:"line-number"},[s._v("254")]),a("br"),a("span",{staticClass:"line-number"},[s._v("255")]),a("br"),a("span",{staticClass:"line-number"},[s._v("256")]),a("br"),a("span",{staticClass:"line-number"},[s._v("257")]),a("br"),a("span",{staticClass:"line-number"},[s._v("258")]),a("br"),a("span",{staticClass:"line-number"},[s._v("259")]),a("br"),a("span",{staticClass:"line-number"},[s._v("260")]),a("br"),a("span",{staticClass:"line-number"},[s._v("261")]),a("br"),a("span",{staticClass:"line-number"},[s._v("262")]),a("br"),a("span",{staticClass:"line-number"},[s._v("263")]),a("br"),a("span",{staticClass:"line-number"},[s._v("264")]),a("br"),a("span",{staticClass:"line-number"},[s._v("265")]),a("br"),a("span",{staticClass:"line-number"},[s._v("266")]),a("br"),a("span",{staticClass:"line-number"},[s._v("267")]),a("br"),a("span",{staticClass:"line-number"},[s._v("268")]),a("br"),a("span",{staticClass:"line-number"},[s._v("269")]),a("br"),a("span",{staticClass:"line-number"},[s._v("270")]),a("br"),a("span",{staticClass:"line-number"},[s._v("271")]),a("br"),a("span",{staticClass:"line-number"},[s._v("272")]),a("br"),a("span",{staticClass:"line-number"},[s._v("273")]),a("br"),a("span",{staticClass:"line-number"},[s._v("274")]),a("br"),a("span",{staticClass:"line-number"},[s._v("275")]),a("br"),a("span",{staticClass:"line-number"},[s._v("276")]),a("br"),a("span",{staticClass:"line-number"},[s._v("277")]),a("br"),a("span",{staticClass:"line-number"},[s._v("278")]),a("br"),a("span",{staticClass:"line-number"},[s._v("279")]),a("br"),a("span",{staticClass:"line-number"},[s._v("280")]),a("br"),a("span",{staticClass:"line-number"},[s._v("281")]),a("br"),a("span",{staticClass:"line-number"},[s._v("282")]),a("br"),a("span",{staticClass:"line-number"},[s._v("283")]),a("br"),a("span",{staticClass:"line-number"},[s._v("284")]),a("br"),a("span",{staticClass:"line-number"},[s._v("285")]),a("br"),a("span",{staticClass:"line-number"},[s._v("286")]),a("br"),a("span",{staticClass:"line-number"},[s._v("287")]),a("br")])])])}),[],!1,null,null,null);n.default=r.exports}}]);